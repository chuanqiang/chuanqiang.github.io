<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七弦桐</title>
  
  <subtitle>以梦为马，随处可栖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chuanqiang.github.io/"/>
  <updated>2019-01-05T08:35:47.813Z</updated>
  <id>http://chuanqiang.github.io/</id>
  
  <author>
    <name>七弦桐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>走吧，去国图静静</title>
    <link href="http://chuanqiang.github.io/2019/01/05/2019-01-05/"/>
    <id>http://chuanqiang.github.io/2019/01/05/2019-01-05/</id>
    <published>2019-01-05T08:29:33.000Z</published>
    <updated>2019-01-05T08:35:47.813Z</updated>
    
    <content type="html"><![CDATA[<p>终于，来到了慕名已久的国家图书馆。作为一个浑身散发人文主义光芒的伪文青，并且在北京待了两年多，而没去国图看一看，真的很说不过去。好多次想去，但总因为这样那样的原因没去成。其实一切原因都是借口，归根到底还是因为生活总沿着惯性平步向前，缺少一些冲动和决心。我们身边处处布满围栏，但咬牙翻过去就是不一样的风景和体验。</p><p><img src="https://upload-images.jianshu.io/upload_images/763193-47a3acbcaa5f1db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="国图"></p><a id="more"></a><p>国图没想象中的气势磅礴，从外面看反倒四四方方毫不起眼，甚至如果没有标牌你都看不出这是堂堂的国家图书馆，不过这样也很好，读书本来就是一个安静、低调的事情，静静在那里就好了。外面虽然没什么，但是一进到国图里面，就是另一番天地了。我进来的这个应该是北区，整个建筑采用了钢结构加玻璃，简约大气，有很强烈的现代气息，并且玻璃设计增加采光度，方便阅读。陈列有序的原木书架摆满了书籍，四四方方的书桌一字排开，很是气派，没有什么装饰品能比得过一面面的书墙更优雅大气的了。</p><p>看到这些陈列的书籍，会使人不由的产生一种对知识的敬畏之情。安静、知识、学习是你在这里能强烈感受到的气氛，这种感觉很奇妙，能带动你的情绪，让你内心安静。据我观察，来这里的人一部分是来借阅、阅读图书典籍，更多的人是带着电脑在这里学习和办公上网，就像去星巴克一样，享受的是并不是这里的图书资源，而是这里的学习气氛和环境。在当下纷纷扰扰的生活中，浮躁和喧嚣充斥在我们身边，我们需要一个安适的场所和环境来让我们静下来做些我们喜欢的事。就像赵雷的歌『静下来』里唱的：</p><blockquote><p>我想应该静下来想一些话<br>我想应该静下来走一段路<br>我想应该静下来看一本书<br>我只想静下来做这些事<br>当一切都开始静下来的时候<br>静的可以让我听到平和安详的心跳<br>静的像云 静的像空气</p></blockquote><p>以后把他当做生活的休憩地，就像大学泡图书馆一样，周末也常来这里泡泡。明天准备继续来这儿，不知道在这里撸代码会不会是另一番体验呢。</p><p>静下来，别走的太快，等一等你的灵魂。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于，来到了慕名已久的国家图书馆。作为一个浑身散发人文主义光芒的伪文青，并且在北京待了两年多，而没去国图看一看，真的很说不过去。好多次想去，但总因为这样那样的原因没去成。其实一切原因都是借口，归根到底还是因为生活总沿着惯性平步向前，缺少一些冲动和决心。我们身边处处布满围栏，但咬牙翻过去就是不一样的风景和体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/763193-47a3acbcaa5f1db8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;国图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chuanqiang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://chuanqiang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>年末、老罗和书</title>
    <link href="http://chuanqiang.github.io/2018/12/23/%E5%B9%B4%E6%9C%AB%E3%80%81%E8%80%81%E7%BD%97%E5%92%8C%E4%B9%A6/"/>
    <id>http://chuanqiang.github.io/2018/12/23/年末、老罗和书/</id>
    <published>2018-12-23T14:25:43.000Z</published>
    <updated>2018-12-23T14:35:54.703Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/763193-1c50a0ba135a158a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="from unsplash"></p><p>有些东西放下了，就放下了，想要拾起来可不知道猴年马月了，就像自己记录日志。当有一天打开 Bear 才发现，天啊，我这是有多久没写了，我之前干嘛了。习惯养成很难，丢掉却很容易，尤其是这种需要自律的习惯，所以为了对得起之前的付出，千万不要轻易「放下」。</p><a id="more"></a><p>已经进入十二月底了，年末临近，各种关于18年总结在网上流行着，不时的提醒你，甚至叫嚣的在你耳边吼：「看吧，你又虚度了一年的光阴，你又要年老了一岁，而你仍旧这么平庸、碌碌无为！」。朋友圈给人开玩笑回复，说我这一年，除了蚂蚁森林坚持每天早上偷能量外，没有什么其他坚持的好的了😂。各种节日也开始了，像冬至日、圣诞节、元旦、新年，年味儿越来越浓，心底却越来越慌，有一种紧迫感，想要抓住年末的尾巴，仿佛临近考试抱佛脚的学生，挣扎着突击去换取一个学期末的好成绩。</p><p>最近有一些事情觉得需要记录一下，有开心的、不开心的。琐碎、无聊却是实实在在的生活。</p><p>老罗的公司摇摇欲坠，看网上新闻好像是经历了资金链问题，现在在和各个公司谈收购的事。看到这些消息，我很失落。一直对老罗和锤子科技很欣赏和钦佩，尤其是老罗的工匠精神和理想主义。现在有一些人，不知道为什么总这些词来讽刺，好像「工匠精神」和「理想主义」成了贬义词，是嗤之以鼻时讽刺和挖苦来用的词。我丝毫理解不了他们的脑回路，于我而言，这是两个熠熠生辉的词汇，是两种珍贵的品质，一个是生产行业和手艺人应该追求的，另一个是保持初心人应该追寻和保有的，我对拥有这两个品质的人充满敬意，理解不了他们的笑点和梗，只是觉得这群人的无聊。一个和你毫无瓜葛的人，做出了优秀的产品，传播了他的设计理念和情怀，并且对手机行业起到了一些十分积极的作用，这样一个人，不管怎样，在我看来都是虽败犹荣，竟招来网上这么多的落井下石。我们的这个国家自古以来都是「胜者王，败者寇」，只崇拜胜者，以结果的成败来衡量一切，而不看过程中体现的东西。我认为老罗的硬件设计和软件创新都是国内一流的，作为一个新晋手机品牌，已经做到了足够的高度。但是供应链的不足和技术快速的更新迭代让追求工匠精神的老罗吃不消了，打磨是一个耗时间的活儿，而时间就是金钱，产品周期控制不好必将导致资金量的断裂，而资金一断，就像推翻了多米诺骨牌，整个就坍塌了。当前创办锤子科技的时候，老罗说：</p><blockquote><p>不是为了输赢，我就是认真。</p></blockquote><p>希望这次老罗能挺住，就像之前他在演讲里说的：</p><blockquote><p>面对挫折、打击的时候，不要伤心、不要难过、不要沮丧，甚至不要控诉、不要愤怒、不要抗议，只管埋头默默擦亮你的武器，准备下一次的战斗。</p></blockquote><p>许多互联网公司的独角兽过的不好，ofo 也面临破产，公司的无人货架换了一家又一家，好像今年是资本寒冬，各家过的都不好。资本其实是很诚实的，赚不来钱靠画饼和讲故事终究会被淘汰，寒冬其实也不全是坏事，它能促进优胜劣汰，那些耐得住寒冬的证明了他们的价值，那些死掉的也推翻了一些没有价值的商业模式。在资本寒冬时代的下半场，创新思维应当摒弃浮躁进行降噪，要回归商业本质。</p><p>最近看了几本书，一本是罗永浩的《生命不息，折腾不止》，一本是《成为乔布斯》，最近在看的一本是《鱼翅与花椒》和《怪诞行为学》，都是很好的书，在地铁通勤时也不觉难熬了。进入互联网社会，各种信息和媒介层出不穷，除了文字外，音频、视频甚至VR、AR都能充当信息传播的载体，相比他们而言，书本好像变得淡薄和平淡，既不生动，纬度也单一，难道书真成了现在社会的淘汰品和老古董嘛？我不这么认为。书有他独特的地方，不得不承认，迄今为止，书仍然是信息质量最高、筛选成本最低且知识最密集的载体。不论是公众号、豆瓣知乎、B站还是其他视频网站，他们的内容都良莠不齐的掺杂在一起，还没等你分辨出食粮和垃圾，就已经在那些标题党、大无用、浮夸和惊世骇俗的信息流和视频流里沦陷了。在这种情形下，你是被动的接受，不需要思考和费力气，根据人的惰性，当然会倾向于这些甚至上瘾。时间久了，大脑就懒得思考和输出了，就像鸦片一样，躺着享受暂时的欢愉。而读书不一样，读书是一个主动汲取的过程，你需要思考、费力气，写读书笔记和感想再汇总知识信息进行输出，这个过程好比强身健体，虽辛苦但受益无穷。希望自己一直能把读书这个习惯坚持下去，少刷抖音多读书😂</p><p>新年临近，岁月增长，希望能让自己永远年轻，永远热泪盈眶。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/763193-1c50a0ba135a158a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;from unsplash&quot;&gt;&lt;/p&gt;
&lt;p&gt;有些东西放下了，就放下了，想要拾起来可不知道猴年马月了，就像自己记录日志。当有一天打开 Bear 才发现，天啊，我这是有多久没写了，我之前干嘛了。习惯养成很难，丢掉却很容易，尤其是这种需要自律的习惯，所以为了对得起之前的付出，千万不要轻易「放下」。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chuanqiang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://chuanqiang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="读书" scheme="http://chuanqiang.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="老罗" scheme="http://chuanqiang.github.io/tags/%E8%80%81%E7%BD%97/"/>
    
  </entry>
  
  <entry>
    <title>生命不息，折腾不止 - 书摘</title>
    <link href="http://chuanqiang.github.io/2018/12/16/%E7%94%9F%E5%91%BD%E4%B8%8D%E6%81%AF%EF%BC%8C%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2%20-%20%E4%B9%A6%E6%91%98/"/>
    <id>http://chuanqiang.github.io/2018/12/16/生命不息，折腾不止 - 书摘/</id>
    <published>2018-12-16T12:51:52.000Z</published>
    <updated>2018-12-16T12:53:28.407Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/763193-7fd89d3fc3410f17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="罗永浩"></p><a id="more"></a><h3 id="第1章-序"><a href="#第1章-序" class="headerlink" title="第1章 序"></a>第1章 序</h3><p>他是一个正常的好人，带一点趣味，带一点理想主义。不怎么勇敢，却比别人勇敢，不怎么彪悍，却被迫活得彪悍。</p><p>生活在不正常的世界里，你稍微正常些就会显得另类和难得可贵<br>他说了这许多，无非是在告诉你一件令人发指的事实，活在这个世上，能有一点正常的思维已经非常难得。</p><p>老罗一定是有洁癖的人，我指的是思想上。一个有洁癖的人，才会把守护平等公正变成自己的本能。</p><p>老罗的意义还在于他显露出的勇猛和积极，他证明了在一个烂掉的环境下，我们不仅可以选择逃避与抵抗，还可以选择反击。 </p><p>这绝不是一本教你成功的书，而是一本教你变正常的书</p><p>等你变正常，在这片土地上你就算是个人物了</p><p>当我们的商业能力和那些巨头没有多少差距时，理想主义将所向披靡。</p><h3 id="第2章-我的奋斗"><a href="#第2章-我的奋斗" class="headerlink" title="第2章 我的奋斗"></a>第2章 我的奋斗</h3><p>我觉得无论你是土财主还是洋财主，土穷光蛋还是洋穷光蛋，只要自己活得开心，而且坚持了自我，就是成功人士。从这个意义上，别人说我是成功人士，我也不否认这一点，尽管我是个穷光蛋。</p><p>全世界的成功学书籍，出了几亿种，归根到底就是一句话：只要努力，就能成功。就是这么一句屁话嘛。</p><p>当你定下一个艰巨的、阶段性的计划的时候，有这么几本书放在床边，绝对是最好的精神鸦片。 </p><p>我们年轻时坚持一些自己认为是正确的东西的时候，总有些长辈，完全是出于善意好心，过来提醒你，告诉你这个社会不像你想的那样，如果你要想怎么样，就必须怎么怎么样。这种话你是不是听过很多次啊？我长大的过程中也不断地听到这种话，我从来都不听，我就一直坚持我年轻时认为是正确的东西。 </p><p>我从来都没有那么多勇敢，我只是有一点点勇敢，但是在普遍懦弱的中国，这已经是难能可贵的品质了。 </p><p>所以这些正直的年轻人到了三十岁很彷徨，开始产生严重的自我怀疑，心想我到底在干吗呢！于是他为了获得生存上的好处，决定跟着耍流氓。所以这些人呢，不管是什么借口，最终选择了去做恶心的成年人社会中的一个恶心的人，最可气的是他们之后还产生了幻觉，说这就是“成熟”。于是又过来毒害年轻人，跟他们说，你看，我年轻的时候也像你这样，现在我这叫成熟，你这叫幼稚。</p><p>每一个生命来到世间，都注定改变世界，这是你的宿命，你别无选择。你要么把世界变得好一点，要么把世界变得坏一点。</p><p>你如果走进社会，为了生存或是为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生耿直，刚正不阿，没做任何恶心的事情，没做任何对别人造成伤害的事情，一辈子拼了老命勉强把老婆、孩子、老娘，把身边的这些人照顾好了，没有成名，没有发财，没有成就伟大的事业，一生正直，最后梗着脖子到了七八十岁死掉了，你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为你，这个世界又多了一个好人，听懂了吧？</p><p>面对挫折、打击的时候，不要伤心、不要难过、不要沮丧，甚至不要控诉、不要愤怒、不要抗议，只管埋头默默擦亮你的武器，准备下一次的战斗。</p><h3 id="第3章-一个理想主义者的创业故事Ⅰ"><a href="#第3章-一个理想主义者的创业故事Ⅰ" class="headerlink" title="第3章 一个理想主义者的创业故事Ⅰ"></a>第3章 一个理想主义者的创业故事Ⅰ</h3><p>因为我从来不觉得理想主义者和金钱之间有什么不可调和的矛盾。 </p><p>列侬死的时候是四十岁，（笑声、掌声）我是1972年出生的，今年已经三十八岁了，所以，有一些这样的故事激励着你，你就会把每一天过得像是最后一天一样。（笑声、掌声）我尝试创业的时候，尽可能让自己勤奋一些就是靠这样的东西来支撑。 </p><p>我当时创业半年，意识到这个问题的迫切和重要性以后，以我三十七岁的高龄，硬着头皮用加班时间开始自学广告设计。（笑声、掌声） </p><p>自己动手，丰衣足食”，那是1939年2月，当时延安经费紧张……（笑声、掌声）反正这句话鼓励了我，我开始“自己动手，丰衣足食”，学着做一些平面设计这方面的东西。硬着头皮用每天加班的时间，到现在为止大概做了一年半。 </p><p>每一次如果能够的话，尽可能让你设计的东西有一点好玩的特质，便于它的传播。 </p><p>安德鲁·格鲁夫大家知道吧？英特尔公司的前总裁。他是一个难民，跟着父母流浪到美国去，后来创立了自己的机构。他写过一本书很著名，名字叫《只有偏执狂才能生存》。我很喜欢这句话，在高度竞争、高度完善的这样一个行业里，只有偏执狂才能生存。我们经常见一些成功的企业领袖，他做得稀里糊涂，但是就把事儿做成了。这种情况除了运气的成分，还有一个比较合理的解释，就是这通常不是一个充分竞争的、高度发达的行业。如果是高度发达、充分竞争的行业，那基本上只有偏执狂才能生存。 </p><p>你去给别人打工，你图什么呢？要么就是钱，要么就是有一个奔头。</p><p>我从来都不觉得我有多么勇敢，我只是有一点点勇敢。在普遍怂货的局面下，你就显得非常勇敢了。就好像你生理上只是正常的，但是在一群阳痿面前，你就是一个猛男。</p><p>我做企业时候的感想，也是差不多的。就是我们没有做出什么特别优秀、特别牛的东西。但是，我们做到了一些特别基本的东西，于是就卓尔不群了，就是这个样子。 </p><p>真的没有觉得做得有多高尚。但别人真的太差了，我的自大是这帮兔崽子自小导致的。我们本来就不用自大、自小，自中就好了。但是，一群人围着你献媚般地自小，逼得你就膨胀起来了。（笑声） </p><p>在理想集团和利益集团的斗争中，最终，总是以理想集团获胜而告终的</p><p>吉姆·柯林斯在他著名的商业书籍《基业长青》中讲“为正确的核心价值观和使命感所驱使的人，所赚的钱比纯粹以赚钱为目的的人赚的钱更多”，这是调查了世界一百多个大型企业以后，通过一些分析得出的数据和结论。</p><p>通过实现理想让人相信实现理想是可能的，通过改变世界让人相信改变世界是可能的”，最后一条才是关键：“即使是在中国”</p><p>有个在全球范围内都取得商业上的成功，非常了不起的机构，甚至把不作恶都写到了自己宗旨里，它来到一个神奇的国度，由于没有采用神奇的方式，不像什么度那样采用神奇的方式，（笑声、掌声）尝试以不神奇的方式在一个神奇的土地上挣扎，甚至做一些妥协和让步，尝试一些调整和转型。它还是失败了，现在，被迫跑到香港去了，但我不觉得这是谷歌的失败。我觉得这是我们国家和时代的耻辱。</p><p>现在这个国家还在上演这种”神奇”。我觉得谷歌迟早会回来，那时候国家应该已经变得不神奇了</p><p>考虑到能让自己的老爹老娘这么开心，当时周云蓬老师说了孝心感动天地的一句话，他说：“只要能让老娘高兴，就算让我上春晚我都在所不惜。”（笑声、掌声）这个是我对孝顺能理解的极限。</p><h3 id="第4章-一个理想主义者的创业故事Ⅱ"><a href="#第4章-一个理想主义者的创业故事Ⅱ" class="headerlink" title="第4章 一个理想主义者的创业故事Ⅱ"></a>第4章 一个理想主义者的创业故事Ⅱ</h3><p>微软看了很激动，微软市场部的一个高管看了完全精神崩溃了，因为其中我提到了，作为中国国内土生土长的中小企业，我们创业开始到今天，在办公室里没有使用过任何一个盗版软件，无论Office还是什么软件，都是正版，这个真的打动了市场部的那个高管。所以，他一怒之下给我们免费赠送了价值好几万元的Windows 7正版和Office 2010的正版，使得我们未来很长的一段时间内增加的人手和增加的电脑都不需要再买正版的Windows和Office软件了。 </p><p>看到身边一些做得恶心的人活得比你好，可能由于脆弱产生一些动摇。但是坚持走下去，一时一地我们不敢讲，长远地看，这个世界大体还是公平的是吧？所以，请大家有一个坚定的信念。 </p><p>美国的政治笑话：一个美国人说，我最讨厌两种人，一种人是种族主义者，一种是黑人。这就是典型的隐性的种族主义者。 </p><p>不要让一小撮人破坏了大多数人的用户体验”</p><p>因为我从来没有从事过商业领域的工作，第一次做这个的时候，我有很多跟年轻时一样的坚持。 </p><p>不是输出技术，输出人才，而是输出价值观。我们虽然是商业机构，但我们是一个能输出价值观的机构。</p><h3 id="第5章-一个理想主义者的创业故事Ⅲ"><a href="#第5章-一个理想主义者的创业故事Ⅲ" class="headerlink" title="第5章 一个理想主义者的创业故事Ⅲ"></a>第5章 一个理想主义者的创业故事Ⅲ</h3><p>不得不佩服罗永浩的本事，他踩到了狗屎，但他能让狗屎后悔。</p><p>如果你是受害一方，别人主动过来招惹你，然后对你下各种黑手……就是我回应的时候，明明你是受害者，如果你搞得很悲催，搞得很愤怒，搞得特别的义正词严，公众是很反感的。所以我们在斗争过程中，即使是受害的一方，也要保持一个良好的心态，带着革命乐观主义去斗智斗勇，这是必要的。</p><p>所以我们说实话，在很多时候对老方这样的人……你看我从去年年底到现在已经六个月了，你想谁有那么好的心情和兴致呢，但我们总是尽可能，把它处理得开心一点，免得公众感到寂寞，所以“娱乐精神”很重要，首先，你要讲道理，同时，有娱乐精神。</p><p>你在每一个阶段，把你该做的事情做完就行了，至于结果怎么样，取决于你怎么看待这个事情</p><p>我们在人生的每一个阶段，能影响多少人，就影响多少人，哪怕只能影响一个人，也好过不影响。就是这样。</p><p>想说的是，在中国，努力去做一个产品的企业家，就是像乔布斯一样做一个完美的产品，有这个意识和能耐的这种企业家，我是没有看到的。我不觉得小米是这样一个方向，尽管它在这方面取得了一些令人尊敬的成绩。也许朝这个方向很努力的黄章老师，可以认为是，魅族的，但是他真的天分非常有限，我说这句话没有任何的恶意或善意，完全是客观中性的这么一个评价。</p><p>想说的是，在中国，努力去做一个产品的企业家，就是像乔布斯一样做一个完美的产品，有这个意识和能耐的这种企业家，我是没有看到的。我不觉得小米是这样一个方向，尽管它在这方面取得了一些令人尊敬的成绩。也许朝这个方向很努力的黄章老师，可以认为是，魅族的，但是他真的天分非常有限，我说这句话没有任何的恶意或善意，完全是客观中性的这么一个评价。 </p><p>现实扭曲场</p><h3 id="第6章-锤子科技Smartisan-T1发布会"><a href="#第6章-锤子科技Smartisan-T1发布会" class="headerlink" title="第6章 锤子科技Smartisan T1发布会"></a>第6章 锤子科技Smartisan T1发布会</h3><p>我们理解的话呢，打造一个完美的产品和用户体验，靠的是三个最基本的东西：硬件配置、设计和工艺、操作系统和软件。</p><p>它的本质是一个企业，到底是设计需求驱动还是工程需求驱动，是工艺完美导向还是生产便利导向</p><p>我们的设计哲学永远围绕着那些美好而永恒的事物，但它们也要具有某些能够与人相互作用、相互影响的特质。产品不应仅仅是一个物件，我们的公司就建立在这一信念之上。产品是设计者的想法，是与人相关联的事物。</p><p>传统上制造这种精美漂亮完善的小的电子元器件和产品，全世界最擅长的本来是谁？日本人本来是最擅长做这个东西的，精致的、小巧的、美妙的这些电子小设备，全世界日本是通杀的，无敌的。但是乔布斯给媒体人的解释是——为什么到了数码时代苹果赶超了日本的那些巨头？为什么呢？——真正核心的原因是日本的传统制造业的这些巨头们，由于我们一时很难说清楚的原因，这背后的成因是很复杂的，总之他们不是特别擅长软件</p><p>乔布斯甚至曾经说过，虽然外界认为苹果是一家硬件公司，但是苹果自己的人，内部定义自己是一家软件公司。</p><p>我相信我已经说服了一部分人。这时候我们迎来第二个严肃的问题就是“怎样把一部4000元的手机在中国卖得特别的好”，正确答案是3000元！（大笑、欢呼、掌声）【真是一手的好营销】</p><p>我觉得这是一个千疮百孔的世界。我发现这个行业里只有一个聪明人，叫乔布斯，他死了，剩下一群笨蛋在做一些丑陋的东西，我感觉被时代选中了</p><p>通过处心积虑地改善人类的生活品质来获取利润，而不是通过处心积虑地获取利润来获取利润”，这也是我们一直信奉的一个信念。（掌声）最后，“和消费类电子产品行业里最具工匠精神和设计意识的先驱者博朗兄弟、盛田昭夫、乔布斯一样，我们始终相信更好的技巧和手艺能创造更好的生活”！这也是挺着我们一路走到今天的工匠精神，一路走到今天。</p><p>不是为了输赢，我就是认真</p><h3 id="第7章-一个理想主义者的创业故事Ⅳ"><a href="#第7章-一个理想主义者的创业故事Ⅳ" class="headerlink" title="第7章 一个理想主义者的创业故事Ⅳ"></a>第7章 一个理想主义者的创业故事Ⅳ</h3><p>人性的角度出发，我们喜欢看到我们讨厌的人的坏消息，也倾向于相信这些坏消息。”这就解释了为什么那些正规的媒体虽然不至于造我的谣，也传了很多关于我的谣言。他讨厌我，看到跟我相关的坏消息的时候，他从人性的角度出发是倾向于相信这些是真的，这是非常合理的一个解读。</p><p>这些事情并不是没有方法解决的，对于任何一个做企业的都是躲不掉的一课。坦率地讲这是我个人的问题，由于过去在媒体这方面过分自信导致出现这种情况。</p><p>他们不是我的粉丝，他们是某种信念、某种价值观、某种理想、某种人生态度的粉丝，他们来到现场，是知道从我身上能看到这些东西</p><p>如果是说这个产品，所有的困难点我都能预见到。那这个产品一定是个很平庸的产品。 </p><p>认真你就输了。不对，不应该这样。我认为，认真你就赢了。 </p><p>创造一些不同，创造一些可以去真正改变人生活的产品</p><p>所以我们虽然被黑，但是仍然要倔强地表现出我们比任何时候都更爱这个世界。虽然心里偶尔也有一些不爽，但是始终都保持心态健康，这个是非常重要的。这也是最后我想跟大家讲的</p><h3 id="第8章-附录：我的故事"><a href="#第8章-附录：我的故事" class="headerlink" title="第8章 附录：我的故事"></a>第8章 附录：我的故事</h3><p>我觉得自己的目光很深情，但后来交往过的女朋友们都说，当我对着喜欢的女孩子深情凝视的时候，从别人的眼中看来，刚好是我最猥琐的时候，这样看来，当年还真是难为她了。</p><p>我们来到世间，本不想互相伤害，但是由于年轻，由于造化弄人，我们确实伤害和被伤害了。</p><p>在我接触到那些真正意义上的启蒙读物之前，单是因为忠于自己的感受，或是基于一些常识，就已经能感觉到这个世界是荒谬和愚蠢的了</p><p>浑浑噩噩的人来到世间，总是跳不出这个圈子：先是傻头傻脑地成为受害者，然后再愣头愣脑地成为施害者。 </p><p>“人心不会熄灭，但它可能蒙上灰烬而不再燃烧。灰烬本来是燃烧的产物，但它反过来又抑制了燃烧。拨开灰烬，你会看到重新燃烧的人心</p><p>又渐渐发现自己其实是一个内心强大、择善固执的人。我不能确定这里面有多大的运气成分，想来一定是有的；我能确定的是，我为了一个我希望坚持的东西做过很多努力和心理调节。 </p><p>永远年轻，永远热泪盈眶。当你试图放弃一个你知道是正确的事情的时候，希望你能再看看这句话。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/763193-7fd89d3fc3410f17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;罗永浩&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="书摘" scheme="http://chuanqiang.github.io/categories/%E4%B9%A6%E6%91%98/"/>
    
    
      <category term="演讲" scheme="http://chuanqiang.github.io/tags/%E6%BC%94%E8%AE%B2/"/>
    
      <category term="老罗" scheme="http://chuanqiang.github.io/tags/%E8%80%81%E7%BD%97/"/>
    
      <category term="书摘" scheme="http://chuanqiang.github.io/tags/%E4%B9%A6%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>抖音为什么能火</title>
    <link href="http://chuanqiang.github.io/2018/11/11/%E6%8A%96%E9%9F%B3%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E7%81%AB/"/>
    <id>http://chuanqiang.github.io/2018/11/11/抖音为什么能火/</id>
    <published>2018-11-11T14:28:56.000Z</published>
    <updated>2018-12-15T16:12:04.841Z</updated>
    
    <content type="html"><![CDATA[<p>不管你玩不玩抖音，你都得承认——抖音火了。就连一直对这种短视频APP嗤之以鼻的我现在没事也会刷一下来消磨时间。客观的说，抖音上百分之八十都是无用的信息，但是如果你懂得搜索筛选和『拿来主义』，抖音也可以在消磨时间换取短暂欢笑的同时收获一些知识技能。比如这次家里装修，我就在抖音上get到一些技巧和经验，不得不说，无论是什么样的信息源，都会良莠不齐，重要的是你知道你需要什么，知道如何区分辨别真假，知道如何利用并并不被它劫持。</p><p><img src="https://upload-images.jianshu.io/upload_images/763193-19401fd2824dec9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="抖音APP"></p><a id="more"></a><p>至于抖音为什么火，知乎上有许多大神的高见，对于从产品设计角度去研究很有借鉴和学习意义。比如抖音媒介的去中心化，这种话语权由集权向民主，中心化向去中心化转移，且势不可挡。还有算法的功效：智能分发，叠加推荐，及热度加权。但这都是抖音成功锦上添花的部分，真正底层的原因是抖音顺应了人性。那么具体顺应了什么样的人性呢？</p><ol><li>我们的注意力，正朝着碎片化堕落。现在，『短』成了风口，从微电影到短视频，从长篇小说到公众号文章，人们的注意力的持久力愈来愈短，通过音乐视频快速获取大脑的兴奋成了一种常态的刺激，有点像吸毒。于是我们也越来越适应这种快消品，很难再看得下去冗长的文艺片和大部头的文学名著，就像总给他吃肉吃辣吃咸，他就很难再去品尝清淡但健康的食物了。我们现在正朝着高频率的短刺激和碎片化堕落，这背后也有移动互联网兴起的大背景的推动。</li><li>现在人们的工作压力大。累了一天躺在床上，很难再有动力去看书学习，此时最想做的是放松压力，追求快乐，逃避痛苦，而抖音正合适。有时候玩游戏很累，但是刷抖音却很轻松。在抖音上你总能找到喜欢和共鸣，然后时不时发出杀猪般的笑声，虽然那只是短暂的欢乐。</li><li>满足虚荣心。抖音上的小哥哥小姐姐平时可能都是些朋友圈点赞没几个，生活枯燥无聊的人，但是借助抖音的神道具和场景也能拍的有趣并俘获一大波点赞和关注，这就比朋友圈带劲多了，能找到认同和满足内心的小虚荣，给你深深的存在感和成就感。</li></ol><p>抖音加速了人们碎片化的生活走向，现在社会上的人是一边批评的慷慨激昂、横眉冷对，一边转眼就自己躲到角落里刷的不亦乐乎了。关于抖音，并不能说明这个社会现象好不好，只能说有其现阶段出现的合理性。还是那句话，掌控自己，不被APP控制，知道自己需要什么就够了。</p><p>况且，抖音上确实一些很有意思呢，哈哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不管你玩不玩抖音，你都得承认——抖音火了。就连一直对这种短视频APP嗤之以鼻的我现在没事也会刷一下来消磨时间。客观的说，抖音上百分之八十都是无用的信息，但是如果你懂得搜索筛选和『拿来主义』，抖音也可以在消磨时间换取短暂欢笑的同时收获一些知识技能。比如这次家里装修，我就在抖音上get到一些技巧和经验，不得不说，无论是什么样的信息源，都会良莠不齐，重要的是你知道你需要什么，知道如何区分辨别真假，知道如何利用并并不被它劫持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/763193-19401fd2824dec9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;抖音APP&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chuanqiang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="产品" scheme="http://chuanqiang.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="抖音" scheme="http://chuanqiang.github.io/tags/%E6%8A%96%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>那些岁月</title>
    <link href="http://chuanqiang.github.io/2018/11/10/%E9%82%A3%E4%BA%9B%E5%B2%81%E6%9C%88/"/>
    <id>http://chuanqiang.github.io/2018/11/10/那些岁月/</id>
    <published>2018-11-10T15:14:15.000Z</published>
    <updated>2018-11-10T15:16:05.951Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>花有重开日，青春不再来</p></blockquote><a id="more"></a><p>上周六是克明的婚礼，我周五下了班从北京赶回家。自从搬家之后，回济南的家就变得非常容易了。从公司出发，一个小时地铁到北京南站，然后高铁一个半小时到达济南西站，然后打车十几分钟就到家了。在时间上缩短了，在精神上也轻松很多，回趟家也没有了疲惫感，我可以做到周五下班回家，然后周一早上坐高铁去上班还精神焕发，在家可以待足两天。唯一的缺点是高铁费钱😶</p><p>克明的婚礼在长清的一酒店，新娘和他是一个小区的，可谓是近水楼台先得月了。婚礼办得不错，简单又体面，现场布置的浪漫温馨，又没那么奢华浪费。我觉得他俩挺般配的，新娘贤惠懂事，新郎踏实稳重，都是居家过日子的主。看着往日宿舍里的毛头小子，也西装革履，开始结婚成家，心里还感慨颇多。当浪漫的音乐响起，当看到台上的萝卜单膝下跪对着新娘说出爱情的誓言的时候，眼睛忍不住有点酸。那年我们还少不更事、岁月青葱，如今都已到了成家立业的年纪。年少的夕阳，来的太快，忘记了什么是天真烂漫。转眼冬至，飞雪漫天，长亭一梦如初却已变沧海桑田。</p><p>相逢和离别是人生永远的主旋律，你不断的认识其他人，他们会与你随行一段旅程，然后离别，你们忙着在各自的道路上披荆斩棘，无暇他顾，幸好还有记忆来见证那些岁月和故事。当然，还有这些照片。<br><img src="https://upload-images.jianshu.io/upload_images/763193-9207b0f67a570e49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="高中舍友"></p><p><img src="https://upload-images.jianshu.io/upload_images/763193-b961c45f1c8c18c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="高中舍友"></p><p>看，我曾经也是宿舍扛把子😀</p><p>毕业之后聚少离多，恐怕只有春节和哪个哥们结婚才能借机小聚一下，欢聚时候经常会胡侃当初在我们兵荒马乱的学生时代里那些让人忍俊不禁的事，谁谁谁的笑料，谁谁谁被老师批评，还有那些班里的女同学，酒过三巡，许多沉睡的记忆也从角落里苏醒过来，奇怪的是昨天的事情都不记得了怎么这么久的事情还都能记得这么清楚，仿佛一切都在昨天发生，仿佛我们还像以前那样青春烂漫。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;花有重开日，青春不再来&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chuanqiang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://chuanqiang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>也话明星</title>
    <link href="http://chuanqiang.github.io/2018/10/16/%E4%B9%9F%E8%AF%9D%E6%98%8E%E6%98%9F/"/>
    <id>http://chuanqiang.github.io/2018/10/16/也话明星/</id>
    <published>2018-10-16T15:03:55.000Z</published>
    <updated>2018-10-16T15:20:46.022Z</updated>
    
    <content type="html"><![CDATA[<p>今天新浪微博的服务器宕机了，是因为两个明星结婚，微博服务器一下并发量剧增导致。挂掉就挂掉吧，本来是没什么大不了的一件事，新浪微博的服务器之前也宕过几次，但这次有趣的地方是新浪曾经信息满满的立下Flag，鼓吹并发承载多强，支持八位明星并发出轨。但是却没能抵得过一对明星结婚。这下悲剧了，啪啪啪的打脸。</p><a id="more"></a><p>翻看网上新闻的评论，发现一个有趣的现象：许多人慷慨激昂的指责现在明星工资太高，说什么戏子误国的话。我倒觉得并不是这样，明星的身价几何说到底是市场经济决定的，投资人并不是傻子，如果明星不能带来那么多的利益，他们才不会给明星那么多的薪酬，既然能给到，就说明明星能撬动这么大的蛋糕，既然能，并且符合市场规律和国家法规，那么明星的钱就挣得没问题。一个明星带来的经济效益远不是明面上我们看到的那些，更多的是给品牌带来的溢价和巨大的流量，单从这几年新浪微博的宕机历史就能看出一个明星带来的流量大小了，在这个年头，流量就是红利。</p><p>有人说戏子误国，其实说到底，戏子是谁养的呢？还不是大众粉丝。其实不光是粉丝，就算是普通人都会不自觉的被网络引流，比如你翻看了相关网页，点击了相关链接都是贡献了你的一个流量，嘴上说的大义凛然，下了班还不照样刷微博看明星演的电视剧。戏子只是粉丝经济中的一小部分受益者，更大的受益者是投资人。如果说是戏子误国，不如说是这个娱乐至死的风气误国，而我们每个人都要为之负责。</p><p>话说回来，娱乐并不是毒品，没必要那么排斥和抵触，这些年我们一直喊娱乐至死可也没耽误好好建设祖国，贡献GDP啊。一个国家经济消费水平越高，精神生活越富足，这个国家的娱乐业才越发达，明星收入也相应越高。你看美国的明星的身价和片酬就知道了。另外，明星也不是那么容易当的，人人都喜欢当明星，但中国15亿人口才有多少当红明星，这个概率和彩票中奖差不多。大部分是默默无闻的，拔尖儿的只是一小撮幸运儿，单看这点，就能产生市场价值。</p><p>之所以有这种声音，一方面确实是对当下娱乐泛滥的担忧，但我总觉得更多的是大众普遍的仇富心态。高喊着戏子误国的那些人，你如果让去他当明星，给他大把大把的钞票，他也是乐滋滋的。只不过他们羡慕明星的生活，没有明星的命，才会说葡萄酸吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天新浪微博的服务器宕机了，是因为两个明星结婚，微博服务器一下并发量剧增导致。挂掉就挂掉吧，本来是没什么大不了的一件事，新浪微博的服务器之前也宕过几次，但这次有趣的地方是新浪曾经信息满满的立下Flag，鼓吹并发承载多强，支持八位明星并发出轨。但是却没能抵得过一对明星结婚。这下悲剧了，啪啪啪的打脸。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chuanqiang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://chuanqiang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于房子的随想</title>
    <link href="http://chuanqiang.github.io/2018/10/14/%E5%85%B3%E4%BA%8E%E6%88%BF%E5%AD%90%E7%9A%84%E9%9A%8F%E6%83%B3/"/>
    <id>http://chuanqiang.github.io/2018/10/14/关于房子的随想/</id>
    <published>2018-10-14T15:20:36.000Z</published>
    <updated>2018-10-14T15:30:12.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>天可补，海可填，南山可移。日月既往，不可复追。</p></blockquote><p>国庆节结束，秋意渐浓，凉意已觉。</p><a id="more"></a><p>国庆节对于上班族来说是除了春节之外最长的一个假期了，所以人们都会选择在这一天去旅行、探亲、结婚。人一旦上班，就像是给自己戴上了枷锁，把自己推进了牢狱——虽然衣食无忧，但是已经远离了自由。你不由的要去挤早高峰的地铁，要朝九晚五，要兢兢业业。虽然也有假期和闲时，但那只像被狱警安排的定时放风罢了。愈长大，愈欲望更多，愈不自由。</p><p>人生如朝露，短瞬即逝。该如何过这一生呢？我等俗人，人云亦云，麻木的不去想这个问题。</p><p><img src="http://oeckzejn4.bkt.clouddn.com/20181014153952984658615.jpg" alt="20181014153952984658615.jpg"></p><p>济南的房子终于装修完毕，家具也大致买全，只待散散味道，挑一吉日良辰，搬家入住。房子不大，紧凑三居两厅，位于济南西，满意的是小区环境和临近济南西站交通枢纽，这样以后做高铁往来北京乃至去往其他各地，都十分方便。在不到二十五岁的当下，终于有了一个属于自己的家。谁都不想一生浪迹，有了一个安身之处，哪怕羁旅在外，只要想到有一个属于自己的小地方，便顿觉安心。</p><p>中国人不但有故土情节，也有房子情节，不然不能理解一个人会为了一个房子而辛苦奋斗半生这种行为。房，在一个人一生中扮演了很重要的角色，我们奔波劳累、含辛茹苦可能就是为了在某一个城市买一个房子，安一个家。因此，对于房子的装修也就变得很重要。从装修的设计施工，到家具的挑选购买，都是一个让人费脑筋却也使人兴奋的过程，想象住到自己亲手置办的房子里生活，也是很幸福的。诚然，这一过程也是挥金的过程，钱哗哗哗的消耗掉，不但房子花钱，装修花钱，我还一同买了14万的车位和11万的储藏室，让人不禁生出『钱到用时方恨少』的感慨。</p><p><img src="http://oeckzejn4.bkt.clouddn.com/20181014153953059850519.jpg" alt="房子走廊.jpg"></p><p>家装是一个尺度范围很大的消费行为，一个一百平的房子，装修的花费可以做到从六七万到六七十万甚至更多，里面的讲究、坑也很多，如果是没有装修常识的人去弄，确实费时费力费财，感觉这个市场很是浑水摸鱼，各个公司水平参差不齐，但同样也是一块很大的蛋糕。反正在济南兼顾口碑和实惠的公司几乎没有，或多或少都会在一些地方『坑』你一下。幸亏有个好老爸，能帮我一手搞定，幸甚至哉！</p><p>国庆在家唠家常，父母辈的都诉说他们那代人艰苦岁月，不时对比得出一个我们这代人多么幸福的结论。我表弟不懈的努努嘴：『我们这代人，谁身上没有个百八十万的贷款啊』。一想，真是！</p><p>背上贷款，我也成了房奴，世界好像就是这样，用年华和自由来换取物欲横流。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;天可补，海可填，南山可移。日月既往，不可复追。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;国庆节结束，秋意渐浓，凉意已觉。&lt;/p&gt;
    
    </summary>
    
      <category term="独白" scheme="http://chuanqiang.github.io/categories/%E7%8B%AC%E7%99%BD/"/>
    
    
      <category term="独白" scheme="http://chuanqiang.github.io/tags/%E7%8B%AC%E7%99%BD/"/>
    
      <category term="随笔" scheme="http://chuanqiang.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>失明症漫记 - 书摘</title>
    <link href="http://chuanqiang.github.io/2018/09/16/%E5%A4%B1%E6%98%8E%E7%97%87%E6%BC%AB%E8%AE%B0%20-%20%E4%B9%A6%E6%91%98/"/>
    <id>http://chuanqiang.github.io/2018/09/16/失明症漫记 - 书摘/</id>
    <published>2018-09-16T12:54:01.000Z</published>
    <updated>2018-09-30T06:03:25.420Z</updated>
    
    <content type="html"><![CDATA[<p>《失明症漫记》是诺贝尔文学奖得主若泽·萨拉马戈代表作，入选诺贝尔学院『所有时代百部最佳文学作品』。</p><a id="more"></a><p>书中讲述了有一种失明症的疾病开始在人群中蔓延，得病的人眼前全部是白色的，什么都看不见。第一批的得病的人以及和患者有过接触的人被控制在一个废弃的精神病院里，后来整个精神病院只有一位医生的妻子还能看见。很快精神病院变为人间地狱，在失明、恐惧、饥饿面前，人性磨灭，兽性凸显，甚至病房内的男性必须用他们妻子、情人的身体来换取苟活的食物。世界也全部沦为地狱，像丧尸中的世界——人们为了食物在街上晃荡，连宠物狗都恢复了兽性，开始吃人。。。最后，当光明重回人间，面对这个充满蛮夷混乱的世界，人们在想些什么？</p><blockquote><p>如果你能看，就要看见，如果你能看见，就要仔细观察。——《箴言书》 </p><p>我们都是这样的混合物，一般是冷漠无情，一般是卑鄙邪恶。</p><p>那人的眼睛似乎正常，虹膜清晰明亮，巩膜像瓷器一样洁白致密。</p><p>现在，他伸出双手在面前神经质地舞动，仿佛正在他刚才所说的牛奶海里游泳。就在他已经张开嘴要高喊救命的时候，就在这最后一刻</p><p>那天夜里，盲人梦见自己失明了。</p><p>如果一个被怀疑受感染者失明了，当然，这迟早会发生，那么请部长先生相信，其他人，就是那些还能看得见的人，马上就会把他赶出去；</p><p>对我们来说，名字有什么用呢，有什么用呢，没有哪一条狗是通过人们给起的名字认出和认识另一条狗的，它们通过气味确认自己和其他狗的身份。在这里，我们是另一种狗，通过吠叫和说话声相互认识</p><p>我们所有人都软弱的时候，重要的是我们还会哭，在许多情况下哭是一种获救的方式，有的时候我们不哭就非死不可。</p><p>如果我们不能完全像正常人一样生活，那么至少应当尽一切努力不要像动物一样生活。</p><p>我们被迫生活在这个地狱里，在我们自己打造的这个地狱中的地狱里，如果说廉耻二字还有一点意义的话，应当感谢那个有胆量进入鬣狗的巢穴去杀死鬣狗的人。</p><p>不论你是何人，你说得对，总有人用恬不知耻填饱肚子。但我们呢，我们已经一无所有，只剩下这最后一点当之有愧的尊严，至少我们还能为享有本属于我们的权利而斗争。（这个时候的眼罩老人太帅！）</p><p>“政府还在吗？”<br>“我不相信还有什么政府，即使有的话也是个想统治盲人的盲人政府，也就是说，虚无企图把虚无组织起来。</p><p>他早已失明，现在依然失明，只是走到厨房门口，听见了她们在阳台上说的话，听见了笑声雨声和水声，呼吸到带肥皂味的空气，然后回到了他的沙发上，正在想这世界上还存在生活，正在问这生活是否还有他的一份。</p><p>即使灾难降临在所有人头上的时候，总是有一些人比另一些人生活得更糟。</p><p>我想我们没有失明，我想我们现在是盲人；能看得见的盲人；能看但又看不见的盲人。</p><p>萨拉马戈希望在他的墓碑上刻上这样的墓志铭：这里安睡着一个愤怒的人。<br>之所以愤怒，因为他认为，‘虽然我生活得很好，但这个世界并不好’‘残忍是人类的发明’‘当权者专横，将一部分人排斥在社会之外’。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《失明症漫记》是诺贝尔文学奖得主若泽·萨拉马戈代表作，入选诺贝尔学院『所有时代百部最佳文学作品』。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://chuanqiang.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="小说" scheme="http://chuanqiang.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="书摘" scheme="http://chuanqiang.github.io/tags/%E4%B9%A6%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>Java汉字转拼音pinyin4j用法</title>
    <link href="http://chuanqiang.github.io/2018/09/04/Java%E6%B1%89%E5%AD%97%E8%BD%AC%E6%8B%BC%E9%9F%B3pinyin4j%E7%94%A8%E6%B3%95/"/>
    <id>http://chuanqiang.github.io/2018/09/04/Java汉字转拼音pinyin4j用法/</id>
    <published>2018-09-04T08:19:01.000Z</published>
    <updated>2018-09-04T08:19:49.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、工具介绍"><a href="#一、工具介绍" class="headerlink" title="一、工具介绍"></a>一、工具介绍</h2><p>pinyin4j 是一个支持将简体和繁体中文转换到成拼音的Java开源类库；</p><a id="more"></a><h4 id="1-功能"><a href="#1-功能" class="headerlink" title="1. 功能"></a>1. 功能</h4><ul><li>支持同一汉字有多个发音</li><li>还支持拼音的格式化输出，比如第几声之类的，</li><li>同时支持简体中文、繁体中文转换为拼音…使用起来也非常简单。下面是其官方网址，其中提供了下载：<ul><li>pinyin4j的<a href="http://sourceforge.net/projects/pinyin4j/files/" target="_blank" rel="external">官方下载地址</a></li></ul></li></ul><h4 id="2-目录结构及说明"><a href="#2-目录结构及说明" class="headerlink" title="2. 目录结构及说明"></a>2. 目录结构及说明</h4><ul><li>doc : pinyin4j的api文档</li><li>lib : pinyin4j的jar包</li><li>src: pinyin4j的源代码</li><li>CHANGELOG.txt : pinyin4j的版本更新日志</li><li>COPYING.txt : LICENSE说明</li><li>README.txt : pinyin4j的概要介绍</li></ul><h4 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h4><p>pinyin4j使用了一个.txt的文本文件（uicode_to_hanyu_pinyin.txt）用来存储汉字unicode编码与拼音的对应关系，通过读取该配置文件达到转换的目的。该属性文件存储信息的基本格式如下：89E3 (jie3,jie4,xie4)   //(对应汉字”解”)89E3 是汉字对应的unicode编码的16进制数，(jie3,jie4,xie4)是该汉字对应的三种读音(在汉语里有多音字)，说明pinyin4j支持多音字的处理pinyin4j的处理过程是这样的：根据String的toCharArray方法得到每个字符（得到”解”字的unicode编码，实际上是35299，由于java中char和String都是unicode编码的可以直接转为int型的编码数据35299），然后利用Integer.toHexString(c1).toUpperCase()将其转换成16进制数[也就是89E3]，通过读取配置文件得到“解”字的拼音(jie3,jie4,xie4)，那么这里有三个拼音，pinyin4j的默认取值为第一个，也就是jie3[表示读jie，声调是三声]</p><h2 id="二、pinyin4J-使用"><a href="#二、pinyin4J-使用" class="headerlink" title="二、pinyin4J 使用"></a>二、pinyin4J 使用</h2><p>pinyin4j 提供的工具类为<code>PinyinHelper</code>,里边提供了静态方法</p><ul><li><code>toHanyuPinyinString()</code>(过时)</li><li><code>toHanyuPinyinStringArray()</code></li></ul><p>pinyin4j 中有四个辅助类分别是：</p><ul><li>HanyuPinyinCaseType</li><li>HanyuPinyinToneType</li><li>HanyuPinyinVCharType</li><li>HanyuPinyinOutputFormat</li></ul><p>具体功能和用法见一下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">HanyuPinyinOutputFormat defaultFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</div><div class="line"><span class="comment">// 控制大小写</span></div><div class="line"><span class="comment">// UPPERCASE：大写  (ZHONG)</span></div><div class="line"><span class="comment">// LOWERCASE：小写  (zhong)</span></div><div class="line">defaultFormat.setCaseType(HanyuPinyinCaseType.UPPERCASE);</div><div class="line"><span class="comment">// WITHOUT_TONE：无音标  (zhong)</span></div><div class="line"><span class="comment">// WITH_TONE_NUMBER：1-4数字表示英标  (zhong4)</span></div><div class="line"><span class="comment">// WITH_TONE_MARK：直接用音标符（必须WITH_U_UNICODE否则异常）  (zhòng)</span></div><div class="line">defaultFormat.setToneType(HanyuPinyinToneType.WITH_TONE_NUMBER);</div><div class="line"><span class="comment">// WITH_V：用v表示ü  (nv)</span></div><div class="line"><span class="comment">// WITH_U_AND_COLON：用"u:"表示ü  (nu:)</span></div><div class="line"><span class="comment">// WITH_U_UNICODE：直接用ü (nü)</span></div><div class="line">defaultFormat.setVCharType(HanyuPinyinVCharType.WITH_U_UNICODE);</div><div class="line"><span class="comment">// oHanyuPinyinStringArray如果传入的字符不是汉字不能转换成拼音，那么会直接返回null。</span></div><div class="line">String[] pinyin = PinyinHelper.toHanyuPinyinStringArray(<span class="string">'重'</span>, defaultFormat);</div><div class="line"><span class="keyword">for</span>(String str: pinyin)&#123;</div><div class="line">System.out.println(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果：</p><blockquote><p>ZHONG4 </p><p>CHONG2</p></blockquote><h4 id="其他工具类"><a href="#其他工具类" class="headerlink" title="其他工具类"></a>其他工具类</h4><blockquote><p>获取获得汉语拼音首字母</p><p>将字符串中的中文转化为拼音,英文字符不变<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 获得汉语拼音首字母</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> chines</span></div><div class="line"><span class="comment"> *            汉字</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAlpha</span><span class="params">(String chines)</span> </span>&#123;</div><div class="line">String pinyinName = <span class="string">""</span>;</div><div class="line"><span class="keyword">char</span>[] nameChar = chines.toCharArray();</div><div class="line">HanyuPinyinOutputFormat defaultFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</div><div class="line">defaultFormat.setCaseType(HanyuPinyinCaseType.UPPERCASE);</div><div class="line">defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nameChar.length; i++) &#123;</div><div class="line"><span class="keyword">if</span> (nameChar[i] &gt; <span class="number">128</span>) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">pinyinName += PinyinHelper.toHanyuPinyinStringArray(</div><div class="line">nameChar[i], defaultFormat)[<span class="number">0</span>].charAt(<span class="number">0</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">pinyinName += nameChar[i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pinyinName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 将字符串中的中文转化为拼音,英文字符不变</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> inputString</span></div><div class="line"><span class="comment"> *            汉字</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPingYin</span><span class="params">(String inputString)</span> </span>&#123;</div><div class="line">HanyuPinyinOutputFormat format = <span class="keyword">new</span> HanyuPinyinOutputFormat();</div><div class="line">format.setCaseType(HanyuPinyinCaseType.LOWERCASE);</div><div class="line">format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</div><div class="line">format.setVCharType(HanyuPinyinVCharType.WITH_V);</div><div class="line">String output = <span class="string">""</span>;</div><div class="line"><span class="keyword">if</span> (inputString != <span class="keyword">null</span> &amp;&amp; inputString.length() &gt; <span class="number">0</span></div><div class="line">&amp;&amp; !<span class="string">"null"</span>.equals(inputString)) &#123;</div><div class="line"><span class="keyword">char</span>[] input = inputString.trim().toCharArray();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</div><div class="line"><span class="keyword">if</span> (java.lang.Character.toString(input[i]).matches(</div><div class="line"><span class="string">"[\\u4E00-\\u9FA5]+"</span>)) &#123;</div><div class="line">String[] temp = PinyinHelper.toHanyuPinyinStringArray(</div><div class="line">input[i], format);</div><div class="line">output += temp[<span class="number">0</span>];</div><div class="line">&#125; <span class="keyword">else</span></div><div class="line">output += java.lang.Character.toString(input[i]);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"*"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> output;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 汉字转换为汉语拼音首字母，英文字符不变</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> chines</span></div><div class="line"><span class="comment"> *            汉字</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> 拼音</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">converterToFirstSpell</span><span class="params">(String chines)</span> </span>&#123;</div><div class="line">String pinyinName = <span class="string">""</span>;</div><div class="line"><span class="keyword">char</span>[] nameChar = chines.toCharArray();</div><div class="line">HanyuPinyinOutputFormat defaultFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</div><div class="line">defaultFormat.setCaseType(HanyuPinyinCaseType.UPPERCASE);</div><div class="line">defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nameChar.length; i++) &#123;</div><div class="line"><span class="keyword">if</span> (nameChar[i] &gt; <span class="number">128</span>) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">pinyinName += PinyinHelper.toHanyuPinyinStringArray(</div><div class="line">nameChar[i], defaultFormat)[<span class="number">0</span>].charAt(<span class="number">0</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">pinyinName += nameChar[i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pinyinName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、工具介绍&quot;&gt;&lt;a href=&quot;#一、工具介绍&quot; class=&quot;headerlink&quot; title=&quot;一、工具介绍&quot;&gt;&lt;/a&gt;一、工具介绍&lt;/h2&gt;&lt;p&gt;pinyin4j 是一个支持将简体和繁体中文转换到成拼音的Java开源类库；&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chuanqiang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://chuanqiang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>时区计算</title>
    <link href="http://chuanqiang.github.io/2018/09/04/%E6%97%B6%E5%8C%BA%E8%AE%A1%E7%AE%97/"/>
    <id>http://chuanqiang.github.io/2018/09/04/时区计算/</id>
    <published>2018-09-04T08:18:50.000Z</published>
    <updated>2018-09-04T08:19:16.756Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解了在 JS 和 JAVA 中关于时区的计算方法。</p><a id="more"></a><h2 id="一、-JS"><a href="#一、-JS" class="headerlink" title="一、 JS"></a>一、 JS</h2><h3 id="两个函数"><a href="#两个函数" class="headerlink" title="两个函数"></a>两个函数</h3><ol><li>得到标准时区的时间</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//得到标准时区的时间</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalTime</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="comment">//参数i为时区值数字，比如北京为东八区则输入8,西5输入-5,现默认东八区北京时间</span></div><div class="line">    <span class="keyword">var</span> i=i?<span class="built_in">parseFloat</span>(i):<span class="number">8</span>; </div><div class="line"> </div><div class="line">    <span class="comment">//得到本地时间</span></div><div class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"> </div><div class="line">    <span class="comment">//得到1970年一月一日到现在的秒数</span></div><div class="line">    <span class="keyword">var</span> local = d.getTime();</div><div class="line"> </div><div class="line">    <span class="comment">//本地时间与GMT时间的时间偏移差</span></div><div class="line">    <span class="keyword">var</span> offset = d.getTimezoneOffset() * <span class="number">60000</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//得到现在的格林尼治时间</span></div><div class="line">    <span class="keyword">var</span> utcTime = local + offset;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(utcTime + <span class="number">3600000</span> * i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>转换服务器时区时间</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//转换服务器时区时间</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">t,utc</span>)</span>&#123;</div><div class="line">    <span class="comment">//t传入的时间参数,utc传入的时区参数</span></div><div class="line">    <span class="keyword">if</span>(!t) <span class="keyword">return</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//获取本地时间</span></div><div class="line">    <span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"> </div><div class="line">    <span class="comment">//获得本地时区</span></div><div class="line">    utc=utc?<span class="built_in">parseFloat</span>(utc):d.getTimezoneOffset()/<span class="number">60</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//格式化传入时间</span></div><div class="line">    <span class="keyword">var</span> time=<span class="keyword">new</span> <span class="built_in">Date</span>(t);</div><div class="line"> </div><div class="line">    <span class="comment">//转换传入时间为本地时间（默认传入服务器时间为东八区时间）</span></div><div class="line">    time.setHours(time.getHours()+(utc<span class="number">-8</span>));</div><div class="line"> </div><div class="line">    <span class="comment">//输出时间</span></div><div class="line">    <span class="keyword">var</span> yy=time.getFullYear();</div><div class="line">    <span class="keyword">var</span> MM=time.getMonth()+<span class="number">1</span>;</div><div class="line">    MM=MM&lt;<span class="number">10</span>?<span class="string">'0'</span>+MM:MM;</div><div class="line">    <span class="keyword">var</span> dd=time.getDate();</div><div class="line">    dd=dd&lt;<span class="number">10</span>?<span class="string">'0'</span>+dd:dd;</div><div class="line">    <span class="keyword">var</span> hh=time.getHours();</div><div class="line">    hh=hh&lt;<span class="number">10</span>?<span class="string">'0'</span>+hh:hh;</div><div class="line">    <span class="keyword">var</span> mm=time.getMinutes();</div><div class="line">    mm=mm&lt;<span class="number">10</span>?<span class="string">'0'</span>+mm:mm;</div><div class="line">    <span class="keyword">var</span> ss=time.getSeconds();</div><div class="line">    ss=ss&lt;<span class="number">10</span>?<span class="string">'0'</span>+ss:ss;</div><div class="line">    <span class="keyword">var</span> date=yy+<span class="string">'-'</span>+MM+<span class="string">'-'</span>+dd+<span class="string">' '</span>+hh+<span class="string">':'</span>+mm+<span class="string">':'</span>+ss;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> date;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="利用Date对象得到本地时间"><a href="#利用Date对象得到本地时间" class="headerlink" title="利用Date对象得到本地时间"></a>利用Date对象得到本地时间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">localTime = d.getTime(); <span class="comment">//通过调用Data()对象的getTime()方法，即可显示1970年1月1日后到此时时间之间的毫秒数。</span></div></pre></td></tr></table></figure><p>接下来，通过Data()对象的getTimezoneOffset()方法来找出当地时间偏移值。在缺省情况下，此方法以分钟显示时区偏移值结果，因此在早先的计算中要将此值转换成毫秒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localOffset = d.getTimezoneOffset() * <span class="number">3600000</span>;</div></pre></td></tr></table></figure><p>然后将当前时间与时区偏移量相加，得到国际标准时间（用毫秒表示的，因为后面还需要计算，所以这里不做转换），然后与你想要知道的时区的偏移量再进行相加，得到那个时间的时间，然后再利用Date对象将其转换为时间字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">utc = localTime + localOffset; <span class="comment">//得到国际标准时间  </span></div><div class="line">offset = <span class="number">5.5</span>;  <span class="comment">// 已知的时区</span></div><div class="line">calctime = utc + (<span class="number">3600000</span>*offset);  </div><div class="line">nd = <span class="keyword">new</span> <span class="built_in">Date</span>(calctime);  </div><div class="line"><span class="built_in">document</span>.write(<span class="string">'指定时区时间是：'</span> + nd.toLocalString());</div></pre></td></tr></table></figure></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>场景描述</strong>：根据国外用户所在的时区，获取数据库（东八区录入）在当地所应展示的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//获得当前时间</span></div><div class="line">    <span class="keyword">var</span> gmtHours =-( d.getTimezoneOffset()/<span class="number">60</span>);<span class="comment">//根据当前时间得到你是哪个时区的</span></div><div class="line">    <span class="keyword">var</span> date = <span class="string">'2014-08-12 09:25:24'</span>;<span class="comment">//上课时间</span></div><div class="line">    date=date.replace(<span class="regexp">/-/g</span>,<span class="string">':'</span>).replace(<span class="string">' '</span>,<span class="string">':'</span>);</div><div class="line">    date=date.split(<span class="string">':'</span>);</div><div class="line">    <span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(date[<span class="number">0</span>],(date[<span class="number">1</span>]<span class="number">-1</span>),date[<span class="number">2</span>],date[<span class="number">3</span>],date[<span class="number">4</span>],date[<span class="number">5</span>]);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"时区："</span> + gmtHours);</div><div class="line">    <span class="comment">//得到1970年一月一日到现在的秒数</span></div><div class="line">    <span class="keyword">var</span> len = time1.getTime();</div><div class="line">    <span class="comment">//本地时间与GMT时间的时间偏移差</span></div><div class="line">    <span class="keyword">var</span> offset = <span class="number">-8</span> * <span class="number">3600000</span>; <span class="comment">// 东八区</span></div><div class="line">    <span class="comment">//得到现在的格林尼治时间 </span></div><div class="line">    <span class="keyword">var</span> utcTime = len + offset;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(utcTime + <span class="number">3600000</span> *gmtHours );</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二、Java"><a href="#二、Java" class="headerlink" title="二、Java"></a>二、Java</h2><h3 id="1-Date中保存的是什么"><a href="#1-Date中保存的是什么" class="headerlink" title="1.Date中保存的是什么"></a>1.Date中保存的是什么</h3><p>在java中，只要我们执行<br><code>Date date = new Date();</code><br>就可以得到当前时间。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Date date = <span class="keyword">new</span> Date();  </div><div class="line">System.out.println(date);</div></pre></td></tr></table></figure></p><p>输出结果是：<br><code>Thu Aug 24 10:15:29 CST 2017</code></p><p>也就是我执行上述代码的时刻：2017年8月24日10点15分29秒。是不是Date对象里存了年月日时分秒呢？不是的，Date对象里存的只是一个long型的变量，其值为自1970年1月1日0点至Date对象所记录时刻经过的毫秒数，调用Date对象getTime()方法就可以返回这个毫秒数，如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Date date = new Date();  </div><div class="line">System.out.println(date + &quot;, &quot; + date.getTime());</div></pre></td></tr></table></figure></p><p>输出如下：<br><code>Thu Aug 24 10:48:05 CST 2017, 1503542885955</code><br>即上述程序执行的时刻是2017年8月24日10点48分05秒，该时刻距离1970年1月1日0点经过了1503542885955毫秒。反过来说，输出的年月日时分秒其实是根据这个毫秒数来反算出来的。</p><h3 id="2-时区"><a href="#2-时区" class="headerlink" title="2.时区"></a>2.时区</h3><p>全球分为24个时区，相邻时区时间相差1个小时。比如北京处于东八时区，东京处于东九时区，北京时间比东京时间晚1个小时，而英国伦敦时间比北京晚7个小时（英国采用夏令时时，8月英国处于夏令时）。比如此刻北京时间是2017年8月24日11:17:10，则东京时间是2017年8月24日12:17:10，伦敦时间是2017年8月24日4:17:10。</p><p>既然Date里存放的是当前时刻距1970年1月1日0点时刻的毫秒数，如果此刻在伦敦、北京、东京有三个程序员同时执行如下语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Date date = new Date();</div></pre></td></tr></table></figure></p><p>那这三个date对象里存的毫秒数是相同的吗？还是北京的比东京的小3600000（北京时间比东京时间晚1小时，1小时为3600秒即3600000毫秒）？答案是，这3个Date里的毫秒数是完全一样的。确切的说，Date对象里存的是自格林威治时间（ GMT）1970年1月1日0点至Date对象所表示时刻所经过的毫秒数。所以，如果某一时刻遍布于世界各地的程序员同时执行new<br> Date语句，这些Date对象所存的毫秒数是完全一样的。也就是说，Date里存放的毫秒数是与时区无关的。</p><p>继续上述例子，如果上述3个程序员调用那一刻的时间是2017年8月24日11:17:10，他们继续调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(date);</div></pre></td></tr></table></figure></p><p>那么北京的程序员将会打印出2017年8月24日11:17:10，而东京的程序员会打印出2017年8月24日12:17:10，伦敦的程序员会打印出2017年8月24日4:17:10。既然Date对象只存了一个毫秒数，为什么这3个毫秒数完全相同的Date对象，可以打印出不同的时间呢？这是因为Sysytem.out.println函数在打印时间时，会取操作系统当前所设置的时区，然后根据这个时区将同毫秒数解释成该时区的时间。当然我们也可以手动设置时区，以将同一个Date对象按不同的时区输出。可以做如下实验验证：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Date date = <span class="keyword">new</span> Date(<span class="number">1503544630000L</span>);  <span class="comment">// 对应的北京时间是2017-08-24 11:17:10  </span></div><div class="line">  </div><div class="line">SimpleDateFormat bjSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);     <span class="comment">// 北京  </span></div><div class="line">bjSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>));  <span class="comment">// 设置北京时区  </span></div><div class="line">  </div><div class="line">SimpleDateFormat tokyoSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  <span class="comment">// 东京  </span></div><div class="line">tokyoSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Tokyo"</span>));  <span class="comment">// 设置东京时区  </span></div><div class="line">  </div><div class="line">SimpleDateFormat londonSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>); <span class="comment">// 伦敦  </span></div><div class="line">londonSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Europe/London"</span>));  <span class="comment">// 设置伦敦时区  </span></div><div class="line">  </div><div class="line">System.out.println(<span class="string">"毫秒数:"</span> + date.getTime() + <span class="string">", 北京时间:"</span> + bjSdf.format(date));  </div><div class="line">System.out.println(<span class="string">"毫秒数:"</span> + date.getTime() + <span class="string">", 东京时间:"</span> + tokyoSdf.format(date));  </div><div class="line">System.out.println(<span class="string">"毫秒数:"</span> + date.getTime() + <span class="string">", 伦敦时间:"</span> + londonSdf.format(date));</div></pre></td></tr></table></figure></p><p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">毫秒数:1503544630000, 北京时间:2017-08-24 11:17:10</div><div class="line">毫秒数:1503544630000, 东京时间:2017-08-24 12:17:10</div><div class="line">毫秒数:1503544630000, 伦敦时间:2017-08-24 04:17:10</div></pre></td></tr></table></figure></p><p>可以看出，同一个Date对象，按不同的时间来格式化，将得到不同时区的时间。由此可见，Date对象里保存的毫秒数和具体输出的时间（即年月日时分秒）是模型和视图的关系，而时区（即Timezone)则决定了将同模型展示成什么样的视图。</p><h3 id="3-从字符串中读取时间"><a href="#3-从字符串中读取时间" class="headerlink" title="3.从字符串中读取时间"></a>3.从字符串中读取时间</h3><p>有时我们会遇到从一个字符串中读取时间的要求，即从字符串中解析时间并得到一个Date对象，比如将”2017-8-24<br> 11:17:10”解析为一个Date对象。现在问题来了，这个时间到底指的是北京时间的2017年8月24日11:17:10，还是东京时间的2017年8月24日11:17:10？如果指的是北京时间，那么这个时间对应的东京时间2017年8月24日12:17:10；如果指的是东京时间，那么这个时间对应的北京时间就是2017年8月24日10:17:10。因此，只说年月日时分秒而不说是哪个时区的，是有歧义的，没有歧义的做法是，给出一个时间字符串，同时指明这是哪个时区的时间。<br>从字符串中解析时间的正确作法是：指定时区来解析。示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String timeStr = <span class="string">"2017-8-24 11:17:10"</span>; <span class="comment">// 字面时间  </span></div><div class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </div><div class="line">sdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>)); <span class="comment">// 设置北京时区  </span></div><div class="line">Date d = sdf.parse(timeStr);  </div><div class="line">System.out.println(sdf.format(d) + <span class="string">", "</span> + d.getTime());</div></pre></td></tr></table></figure></p><p>输出为：<br><code>2017-08-24 11:17:10, 1503544630000</code>,</p><p>将一个时间字符串按不同时区来解释，得到的Date对象的值是不同的。验证如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String timeStr = <span class="string">"2017-8-24 11:17:10"</span>; <span class="comment">// 字面时间  </span></div><div class="line">SimpleDateFormat bjSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </div><div class="line">bjSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>));  </div><div class="line">Date bjDate = bjSdf.parse(timeStr);  <span class="comment">// 解析  </span></div><div class="line">System.out.println(<span class="string">"字面时间: "</span> + timeStr +<span class="string">",按北京时间来解释:"</span> + bjSdf.format(bjDate) + <span class="string">", "</span> + bjDate.getTime());  </div><div class="line">  </div><div class="line">SimpleDateFormat tokyoSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  <span class="comment">// 东京  </span></div><div class="line">tokyoSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Tokyo"</span>));  <span class="comment">// 设置东京时区  </span></div><div class="line">Date tokyoDate = tokyoSdf.parse(timeStr); <span class="comment">// 解析  </span></div><div class="line">System.out.println(<span class="string">"字面时间: "</span> + timeStr +<span class="string">",按东京时间来解释:"</span>  + tokyoSdf.format(tokyoDate) + <span class="string">", "</span> + tokyoDate.getTime());</div></pre></td></tr></table></figure></p><p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">字面时间: 2017-8-24 11:17:10,按北京时间来解释:2017-08-24 11:17:10, 1503544630000</div><div class="line">字面时间: 2017-8-24 11:17:10,按东京时间来解释:2017-08-24 11:17:10, 1503541030000</div><div class="line">可以看出，对于&quot;2017-8-24 11:17:10&quot;这个字符串，按北京时间来解释得到Date对象的毫秒数是</div><div class="line">1503544630000；而按东京时间来解释得到的毫秒数是1503541030000，前者正好比后者大于3600000毫秒即1个小时，正好是北京时间和东京时间的时差。这很好理解，北京时间2017-08-24 11:17:10对应的毫秒数是1503544630000，而东京时间2017-08-24 11:17:10对应的北京时间其实是2017-08-24 10:17:10（因为北京时间比东京时间晚1个小时），北京时间2017-08-24</div><div class="line"> 10:17:10自然比北京时间2017-08-24 11:17:10少3600000毫秒。</div></pre></td></tr></table></figure></p><h3 id="4-将字符串表示的时间转换成另一个时区的时间字符串"><a href="#4-将字符串表示的时间转换成另一个时区的时间字符串" class="headerlink" title="4.将字符串表示的时间转换成另一个时区的时间字符串"></a>4.将字符串表示的时间转换成另一个时区的时间字符串</h3><p>综合以上分析，如果给定一个时间字符串，并告诉你这是某个时区的时间，要将它转换为另一个时区的时间并输出，正确的做法是：</p><ol><li>将字符串按原时区转换成Date对象；</li><li>将Date对象格式化成目标时区的时间。</li></ol><p>比如，将北京时间”2017-8-24 11:17:10”输出成东京时间，代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String timeStr = <span class="string">"2017-8-24 11:17:10"</span>; <span class="comment">// 字面时间  </span></div><div class="line">SimpleDateFormat bjSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </div><div class="line">bjSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>));  </div><div class="line">Date date = bjSdf.parse(timeStr);  <span class="comment">// 将字符串时间按北京时间解析成Date对象  </span></div><div class="line">  </div><div class="line">SimpleDateFormat tokyoSdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  <span class="comment">// 东京  </span></div><div class="line">tokyoSdf.setTimeZone(TimeZone.getTimeZone(<span class="string">"Asia/Tokyo"</span>));  <span class="comment">// 设置东京时区  </span></div><div class="line">System.out.println(<span class="string">"北京时间: "</span> + timeStr +<span class="string">"对应的东京时间为:"</span>  + tokyoSdf.format(date));</div></pre></td></tr></table></figure></p><p>输出为：<br><code>北京时间:2017-8-24 11:17:10对应的东京时间为:2017-08-24 12:17:10</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解了在 JS 和 JAVA 中关于时区的计算方法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chuanqiang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://chuanqiang.github.io/tags/java/"/>
    
      <category term="时区" scheme="http://chuanqiang.github.io/tags/%E6%97%B6%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 详解和实例</title>
    <link href="http://chuanqiang.github.io/2018/09/04/Spring%20AOP%20%E8%AF%A6%E8%A7%A3%E5%92%8C%E5%AE%9E%E4%BE%8B/"/>
    <id>http://chuanqiang.github.io/2018/09/04/Spring AOP 详解和实例/</id>
    <published>2018-09-04T08:10:10.000Z</published>
    <updated>2018-09-04T08:30:19.722Z</updated>
    
    <content type="html"><![CDATA[<p>本文重要讲解了 AOP 的概念和原理，并提供了四个实例来帮助理解。<br><a id="more"></a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>面向切面编程(也叫面向方面编程)：Aspect Oriented Programming(AOP)，是软件开发中的一个热点，也是Spring框架中的一个重要内容。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>主要的功能是：日志记录，性能统计，安全控制，事务处理，异常处理等等。</p><p>主要的意图是：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><p><img src="http://oeckzejn4.bkt.clouddn.com/20180904153604496563715.png" alt=""></p><p>我们要做的，是定义一个切面，在切面的纵向定义处理方法，处理完成后，回到横向业务流（静态代理模式实现 proxy）。</p><p>因为Java 是一门静态的强类型语言， 代码一旦写好， 编译成 <code>java class</code> 以后 ，可以在运行时通过反射（Reflection）来查看类的信息， 但是对类进行修改的话很困难。有如下方式来实现：</p><ol><li>在编译的时候， 根据AOP的配置信息，悄悄的把日志，安全，事务等“切面”代码 和业务类编译到一起去。【预编译】</li><li>在运行期，业务类加载以后， 通过Java动态代理技术为业务类生产一个代理类， 把“切面”代码放到代理类中，  Java 动态代理要求业务类需要实现接口才行。【运行期动态代理】</li><li>在运行期， 业务类加载以后， 动态的使用字节码构建一个业务类的子类，将“切面”逻辑加入到子类当中去, CGLIB就是这么做的。</li></ol><p>spring 采用（1）+（2）方式</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="1-实现-AOP-接口"><a href="#1-实现-AOP-接口" class="headerlink" title="1. 实现 AOP 接口"></a>1. 实现 AOP 接口</h3><h3 id="2-通过-xml配置方式"><a href="#2-通过-xml配置方式" class="headerlink" title="2. 通过.xml配置方式"></a>2. 通过<code>.xml</code>配置方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima12.spring.aop.xml.transaction.PersonDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transaction"</span> <span class="attr">class</span>=<span class="string">"com.itheima12.spring.aop.xml.transaction.Transaction"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 切入点表达式  确定目标类 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">expression="execution(*</span> <span class="attr">com.itheima12.spring.aop.xml.transaction.PersonDaoImpl.</span>*(<span class="attr">..</span>))"  <span class="attr">id</span>=<span class="string">"perform"</span>/&gt;</span></div><div class="line">      <span class="comment">&lt;!-- ref指向的对象就是切面 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"transaction"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">              前置通知</span></div><div class="line"><span class="comment">                 1、在目标方法执行之前</span></div><div class="line"><span class="comment">                 2、获取不到目标方法的返回值</span></div><div class="line"><span class="comment">           --&gt;</span></div><div class="line">          <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">              &lt;aop:before method="beginTransaction" pointcut-ref="perform"/&gt;</span></div><div class="line"><span class="comment">           --&gt;</span></div><div class="line">          <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">              后置通知</span></div><div class="line"><span class="comment">                 1、后置通知可以获取到目标方法的返回值</span></div><div class="line"><span class="comment">                 2、当目标方法抛出异常，后置通知将不再执行</span></div><div class="line"><span class="comment">           --&gt;</span></div><div class="line">           <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">              &lt;aop:after-returning method="commit" pointcut-ref="perform" returning="val"/&gt;</span></div><div class="line"><span class="comment">           --&gt;</span></div><div class="line">          <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">              最终通知</span></div><div class="line"><span class="comment">                 无论目标方法是否抛出异常都将执行</span></div><div class="line"><span class="comment">           --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"finallyMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span>/&gt;</span></div><div class="line">          <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">              异常通知（多个异常的处理）这个异常处理是完全独立于系统之外的，脱离业务逻辑</span></div><div class="line"><span class="comment">           --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"throwingMethod"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span>/&gt;</span></div><div class="line">          <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">              环绕通知（可以进行权限管理，比如 shiro 底层）</span></div><div class="line"><span class="comment">                      1. 能控制目标方法的执行</span></div><div class="line"><span class="comment">                      2. 前置通知和后置通知能在目标方法的前面和后面加一些代码，但是不能控制目标方法的执行</span></div><div class="line"><span class="comment">           --&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><ul><li>切面(aspect)：用来切插业务方法的类。</li><li>连接点(joinpoint)：是切面类和业务类的连接点，其实就是封装了业务方法的一些基本属性，作为通知的参数来解析。</li><li>通知(advice)：在切面类中，声明对业务方法做额外处理的方法。</li><li>切入点(pointcut)：业务类中指定的方法，作为切面切入的点。其实就是指定某个方法作为切面切的地方。</li><li>目标对象(target object)：被代理对象。</li><li>AOP代理(aop proxy)：代理对象。</li><li>通知<ul><li>前置通知(before advice)：在切入点之前执行。</li><li>后置通知(after returning advice)：在切入点执行完成后，执行通知。</li><li>环绕通知(around advice)：包围切入点，调用方法前后完成自定义行为。</li><li>异常通知(after throwing advice)：在切入点抛出异常后，执行通知。　　</li></ul></li></ul><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p><img src="http://oeckzejn4.bkt.clouddn.com/20180904153604608697869.png" alt="切入点表达式"></p><h3 id="Spring-AOP-的原理："><a href="#Spring-AOP-的原理：" class="headerlink" title="Spring AOP 的原理："></a>Spring AOP 的原理：</h3><ol><li>当spring启动的时候，加载两个bean，对两个bean进行实例化</li><li>当spring容器对配置文件解析到<code>&lt;aop：config&gt;</code>的时候，把切入点表达式解析出来，按照切入点表达式匹配spring容器内的bean。</li><li>如果匹配成功，则为该<code>bean</code>创建对象</li><li>当客户端利用context.getBean获取一个对象时，如果该对象有代理对象，则返回代理对象。如果没有，则返回本身</li></ol><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><h3 id="1-AOP-权限管理（环绕通知）"><a href="#1-AOP-权限管理（环绕通知）" class="headerlink" title="1. AOP 权限管理（环绕通知）"></a>1. AOP 权限管理（环绕通知）</h3><p>自定义注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//范围：在方法上</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PrivlegeInfo &#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>编写注解解析器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationParse</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * targetClass  目标类的class形式</span></div><div class="line"><span class="comment">     * methodName  在客户端调用哪个方法，methodName就代表哪个方法</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parse</span><span class="params">(Class targetClass,String methodName)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        String methodAccess = <span class="string">""</span>;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 该方法没有参数</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        Method method = targetClass.getMethod(methodName);</div><div class="line">        <span class="comment">//判断方法上面是否存在PrivilegeInfo注解</span></div><div class="line">        <span class="keyword">if</span>(method.isAnnotationPresent(PrivlegeInfo.class))&#123;</div><div class="line">            <span class="comment">//得到方法上面的注解</span></div><div class="line">            PrivlegeInfo privlegeInfo = method.getAnnotation(PrivlegeInfo.class);</div><div class="line">            methodAccess = privlegeInfo.name();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> methodAccess;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>service方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceImpl</span> <span class="keyword">implements</span> <span class="title">PersonService</span></span>&#123;</div><div class="line">    <span class="meta">@PrivlegeInfo</span>(name=<span class="string">"savePerson"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"save person"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PrivlegeInfo</span>(name=<span class="string">"updatePerson"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"update person"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>用户权限的切面类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeAspect</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 用户拥有的权限</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> List&lt;Privilege&gt; privileges = <span class="keyword">new</span> ArrayList&lt;Privilege&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Privilege&gt; <span class="title">getPrivileges</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> privileges;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrivileges</span><span class="params">(List&lt;Privilege&gt; privileges)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.privileges = privileges;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isAccessMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 1、获取访问目标方法应该具备的权限</span></div><div class="line"><span class="comment">         *     得到</span></div><div class="line"><span class="comment">         *        1、目标类的class形式</span></div><div class="line"><span class="comment">         *        2、方法的名称</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        Class targetClass = joinPoint.getTarget().getClass();</div><div class="line">        String methodName = joinPoint.getSignature().getName();</div><div class="line">        <span class="comment">//得到访问该方法的权限</span></div><div class="line">        String methodAccess = AnnotationParse.parse(targetClass, methodName);</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">//遍历用户所有的权限，查看是否用访问该方法的权限</span></div><div class="line">        <span class="keyword">for</span> (Privilege privilege : privileges) &#123;</div><div class="line">            <span class="comment">//该用户能够访问目标方法</span></div><div class="line">            <span class="keyword">if</span>(methodAccess.equals(privilege.getName()))&#123;</div><div class="line">                flag = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;        </div><div class="line">        <span class="keyword">if</span>(flag)&#123;<span class="comment">//访问目标方法</span></div><div class="line">            joinPoint.proceed();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            System.out.println(<span class="string">"对不起，您没有权限访问"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>application 配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> </span></div><div class="line"><span class="tag">          <span class="attr">expression</span>=<span class="string">"execution(* com.itheima12.spring.aop.xml.privilege.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"perform"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"privilegeAspect"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"isAccessMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"perform"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p><p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrivilege</span><span class="params">()</span></span>&#123;</div><div class="line">        ApplicationContext context = </div><div class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 初始化用户的权限</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        PrivilegeAspect privilegeAspect = (PrivilegeAspect)context.getBean(<span class="string">"privilegeAspect"</span>);</div><div class="line">        Privilege privilege1 = <span class="keyword">new</span> Privilege();</div><div class="line">        privilege1.setName(<span class="string">"savePerson"</span>);</div><div class="line"></div><div class="line">        Privilege privilege2 = <span class="keyword">new</span> Privilege();</div><div class="line">        privilege2.setName(<span class="string">"updatePerson"</span>);</div><div class="line"></div><div class="line">        privilegeAspect.getPrivileges().add(privilege2);</div><div class="line">        privilegeAspect.getPrivileges().add(privilege1);</div><div class="line"></div><div class="line">        PersonService personService = (PersonService)context.getBean(<span class="string">"personService"</span>);</div><div class="line">        personService.savePerson();</div><div class="line">        personService.updatePerson();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="2-AOP-缓存"><a href="#2-AOP-缓存" class="headerlink" title="2. AOP 缓存"></a>2. AOP 缓存</h3><p>application<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima12.spring.aop.xml.transaction"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></div></pre></td></tr></table></figure></p><p>切面类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@Aspect</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@Pointcut</span>("execution(* com.itheima12.spring.aop.xml.transaction.PersonDaoImpl.*(..))")</span></div><div class="line"><span class="comment"> * private void aa()&#123;&#125;</span></div><div class="line"><span class="comment">       就相当于</span></div><div class="line"><span class="comment"> * &lt;aop:config&gt;</span></div><div class="line"><span class="comment">          &lt;aop:pointcut </span></div><div class="line"><span class="comment">              expression="execution(* com.itheima12.spring.aop.xml.transaction.PersonDaoImpl.*(..))" </span></div><div class="line"><span class="comment">              id="aa()"/&gt;</span></div><div class="line"><span class="comment">   &lt;/aop:config&gt;</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> zd</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Component</span>(<span class="string">"transaction"</span>)  <span class="comment">// 加入到spring容器中</span></div><div class="line"><span class="meta">@Aspect</span>    <span class="comment">// 证明这个注解所在类是切面类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.itheima12.spring.aop.xml.transaction.PersonDaoImpl.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">aa</span><span class="params">()</span></span>&#123;&#125;  <span class="comment">//方法签名</span></div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"aa()"</span>)  <span class="comment">// 前置通知</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"begin transaction"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"aa()"</span>)  <span class="comment">// 后置通知</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"commit"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="3-AOP-日志管理"><a href="#3-AOP-日志管理" class="headerlink" title="3. AOP 日志管理"></a>3. AOP 日志管理</h3><p>此项目是在 spring boot 环境下实现。</p><p>1、 添加maven依赖注解<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--springBoot 的aop--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>2、添加数据库表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`journal`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`journal`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'日志id'</span>,</div><div class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</div><div class="line">  <span class="string">`modularType`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'模块类型'</span>,</div><div class="line">  <span class="string">`operationType`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作类型：0：增/1：删/2：改/3：关闭/4：移动'</span>,</div><div class="line">  <span class="string">`operationTime`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作时间'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p><p>3、增加对应的实体类</p><p>4、日志添加 Mapper<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line"> * 日志管理</div><div class="line"> * Created by 陈梓平 on 2017/8/12.</div><div class="line"> */</div><div class="line">public interface JournalMapper &#123;</div><div class="line">    /**日志添加*/</div><div class="line">    int addJournalInfo(JournalInfo journalInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></div><div class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.chen.mapper.JournalMapper"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--添加日志信息--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addJournalInfo"</span>&gt;</span></div><div class="line">      INSERT INTO journal  (uid,modularType,operationType,operationTime)</div><div class="line">      VALUES (10086,#&#123;modularType&#125;,#&#123;operationType&#125;,NOW())</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p><p>5、日志工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JournalUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JournalMapper jouUtilsJournalMapper;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JournalInfo journalInfo;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 添加日志</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> modeularType</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> operationType</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJournalInfo</span><span class="params">(<span class="keyword">int</span> modeularType,<span class="keyword">int</span> operationType,<span class="keyword">int</span> uid)</span> </span>&#123;</div><div class="line">        journalInfo.setModularType(modeularType);</div><div class="line">        journalInfo.setOperationType(operationType);</div><div class="line">        journalInfo.setUid(uid);</div><div class="line">        jouUtilsJournalMapper.addJournalInfo(journalInfo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>6、静态类（包括模块和操作）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 静态信息</span></div><div class="line"><span class="comment"> * Created by Administrator on 2017/8/12.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInfo</span> </span>&#123;</div><div class="line">    <span class="comment">/**--------------------  模块类型  ----------------*/</span></div><div class="line">    <span class="comment">//模块1</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODEULARTTYPE_FIRST= <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**--------------------  操作类别  ---------------*/</span></div><div class="line">    <span class="comment">//增加</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OPERATIONTYPE_ADD = <span class="number">0</span>;</div><div class="line">    <span class="comment">//删除</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OPERATIONTYPE_UPDATE = <span class="number">1</span>;</div><div class="line">    <span class="comment">//修改</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OPERATIONTYPE_DELETE = <span class="number">2</span>;</div><div class="line">    <span class="comment">//开启</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OPERATIONTYPE_OPEN = <span class="number">3</span>;</div><div class="line">    <span class="comment">//关闭</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OPERATIONTYPE_CLOSE = <span class="number">4</span>;</div><div class="line">    <span class="comment">//移动</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OPERATIONTYPE_MOVER = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**---------------   AOP代理  --------------------*/</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_OPERATION_TYPE_ADD =  <span class="string">"add"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_OPERATION_TYPE_EDIT =  <span class="string">"edit"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_OPERATION_TYPE_MOVE =  <span class="string">"move"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_OPERATION_TYPE_DELETE =  <span class="string">"delete"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_OPERATION_TYPE_OPENORCLOSE =  <span class="string">"openOrClose"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_MODULAR_TYPE_FIRST = <span class="string">"Journal"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_SPIT_CLASSNAME = <span class="string">"impl."</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_SPIT_MODULAR_TYPE= <span class="string">"ServiceImpl"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>7、日志切面AOP<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JournalAspect</span> </span>&#123;</div><div class="line">    <span class="comment">/**日志输出*/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JournalAspect.class);</div><div class="line"></div><div class="line">    <span class="comment">/**日志工具类*/</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JournalUtils aspectJournalUtils;</div><div class="line"></div><div class="line">    <span class="comment">/**service层切面*/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String POINT_CUT = <span class="string">"execution(* com.chen.service..*(..))"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(POINT_CUT)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 后置最终通知（目标方法只要执行完了就会执行后置通知方法）</span></div><div class="line"><span class="comment">     * 日志管理</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@After</span>(value = <span class="string">"pointcut()"</span>)</div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAdvice</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> CustomException </span>&#123;</div><div class="line">        <span class="comment">//用的最多 通知的签名</span></div><div class="line">        Signature signature = joinPoint.getSignature();</div><div class="line">        <span class="comment">//1.获取模块类型</span></div><div class="line">        <span class="comment">//AOP代理类的名字（包括包名）</span></div><div class="line">        String declaringTypeName = signature.getDeclaringTypeName();</div><div class="line">        logger.info(<span class="string">"AOP代理类的名字"</span>+declaringTypeName);</div><div class="line">        <span class="comment">//获取代理类的类名</span></div><div class="line">        String[] split = declaringTypeName.split(StaticInfo.AOP_SPIT_CLASSNAME);</div><div class="line">        String className = split[<span class="number">1</span>];</div><div class="line">        <span class="comment">//获取模块名</span></div><div class="line">        String[] modularTypeNames = className.split(StaticInfo.AOP_SPIT_MODULAR_TYPE);</div><div class="line">        String modularTypeName = modularTypeNames[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> modulerType = -<span class="number">1</span>;</div><div class="line">        <span class="comment">//模块类型筛选</span></div><div class="line">        modulerType = <span class="keyword">this</span>.getModularType(modularTypeName, modulerType);</div><div class="line"></div><div class="line">        <span class="comment">//2.获取操作类型</span></div><div class="line">        <span class="comment">//代理的是哪一个方法</span></div><div class="line">        String  methodName = signature.getName();</div><div class="line">        logger.info(<span class="string">"AOP代理方法的名字"</span>+signature.getName());</div><div class="line">        <span class="keyword">int</span> opreationType = -<span class="number">1</span>;</div><div class="line">        opreationType = getOpreationType(joinPoint, signature, opreationType,methodName);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (modulerType==-<span class="number">1</span>&amp;&amp;opreationType==-<span class="number">1</span>)</div><div class="line">            <span class="keyword">if</span> (!StringUtils.isBlank(methodName)||!StringUtils.isBlank(modularTypeName))</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(ResultEnum.JOURNAL_LOG_ERROR);</div><div class="line"></div><div class="line">        <span class="comment">//3.添加日志</span></div><div class="line">        <span class="keyword">if</span> (modulerType!=-<span class="number">1</span>&amp;&amp;opreationType!=-<span class="number">1</span>)</div><div class="line">            <span class="comment">//TODO 3.1 从请求获取用户id</span></div><div class="line">            aspectJournalUtils.addJournalInfo(modulerType,opreationType, <span class="number">10086</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 模块类型筛选</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> modularTypeName</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getModularType</span><span class="params">(String modularTypeName, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">        <span class="comment">//模块类型筛选</span></div><div class="line">        <span class="keyword">switch</span> (modularTypeName)&#123;</div><div class="line">            <span class="keyword">case</span> StaticInfo.AOP_MODULAR_TYPE_FIRST:</div><div class="line">                type = StaticInfo.MODEULARTTYPE_FIRST;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//多模块添加</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取操作类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> opreationType</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getOpreationType</span><span class="params">(JoinPoint joinPoint, Signature signature, <span class="keyword">int</span> opreationType,String  methodName )</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (methodName)&#123;</div><div class="line">            <span class="keyword">case</span> StaticInfo.AOP_OPERATION_TYPE_ADD:</div><div class="line">                opreationType = StaticInfo.OPERATIONTYPE_ADD;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> StaticInfo.AOP_OPERATION_TYPE_EDIT:</div><div class="line">                opreationType = StaticInfo.OPERATIONTYPE_UPDATE;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> StaticInfo.AOP_OPERATION_TYPE_MOVE:</div><div class="line">                opreationType = StaticInfo.OPERATIONTYPE_MOVER;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> StaticInfo.AOP_OPERATION_TYPE_DELETE:</div><div class="line">                opreationType = StaticInfo.OPERATIONTYPE_DELETE;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> StaticInfo.AOP_OPERATION_TYPE_OPENORCLOSE:</div><div class="line">                Object[] obj = joinPoint.getArgs();</div><div class="line">                <span class="keyword">int</span> arg = (<span class="keyword">int</span>) obj[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span> (arg==<span class="number">1</span>)</div><div class="line">                    opreationType = StaticInfo.OPERATIONTYPE_OPEN;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    opreationType = StaticInfo.OPERATIONTYPE_CLOSE;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> opreationType;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>8、添加Controller测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JournalController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JournalService journalService;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"journalAdd"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> journalService.add();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>9、添加Service测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JournalServiceImpl</span> <span class="keyword">implements</span> <span class="title">JournalService</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ResultUtils.success(ResultEnum.OK);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="4-AOP-实现分布式锁"><a href="#4-AOP-实现分布式锁" class="headerlink" title="4. AOP 实现分布式锁"></a>4. AOP 实现分布式锁</h3><p>改造前：<br>所有应用分布式锁的地方都需要如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">RLock redissonLock = redissonUtil.getRedisson().getLock(<span class="string">"saveCourseApplyResource"</span>+courseApplyResource.getUserId());</div><div class="line">    <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//等待3秒，有效期5秒</span></div><div class="line">        res = redissonLock.tryLock(<span class="number">3</span>, <span class="number">5</span>, TimeUnit.SECONDS);</div><div class="line">        <span class="keyword">if</span>(res)&#123;</div><div class="line">            <span class="comment">//执行业务操作</span></div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"网络错误，请重试"</span>);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span>(res)&#123;</div><div class="line">            redissonLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>改造后： </p><ol><li><p>首先需要一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description: 分布式锁应用注解&lt;br&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: name：yuxin &lt;br&gt;email: yuruixin@ixincheng.com &lt;br&gt;</span></div><div class="line"><span class="comment"> * Create Time:  2018/3/4 0004-下午 8:48&lt;br&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Lock &#123;</div><div class="line">    <span class="comment">//分布式锁的key前缀</span></div><div class="line">    <span class="function">String <span class="title">lockName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">    <span class="comment">//等待时长</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">waitTime</span><span class="params">()</span> <span class="keyword">default</span> 3</span>;</div><div class="line">    <span class="comment">//有效期时长</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">effectiveTime</span><span class="params">()</span> <span class="keyword">default</span> 5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后，需要一个切面服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description: 分布式锁切面服务&lt;br&gt;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: name：yuxin &lt;br&gt;email: yuruixin@ixincheng.com &lt;br&gt;</span></div><div class="line"><span class="comment"> * Create Time:  2018/3/4 0004-下午 8:46&lt;br&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xczhihui.bxg.online.common.utils.RedissonUtil;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"><span class="keyword">import</span> org.redisson.api.RLock;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String LOCK_NAME = <span class="string">"lockName"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String WAIT_TIME = <span class="string">"waitTime"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String EFFECTIVE_TIME = <span class="string">"effectiveTime"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedissonUtil redissonUtil;</div><div class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.xczhihui.common.Lock)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockPointcut</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"lockPointcut()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">        Map&lt;String,Object&gt; map = getLockParams(point);</div><div class="line">        String lockName = (String) map.get(LOCK_NAME);</div><div class="line">        <span class="keyword">int</span> waitTime = (<span class="keyword">int</span>) map.get(WAIT_TIME);</div><div class="line">        <span class="keyword">int</span> effectiveTime = (<span class="keyword">int</span>) map.get(EFFECTIVE_TIME);</div><div class="line">        Object[] methodParam = <span class="keyword">null</span>;</div><div class="line">        Object object=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> resl = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">//获取方法参数</span></div><div class="line">        methodParam = point.getArgs();</div><div class="line">        String lockKey = (String) methodParam[<span class="number">0</span>];</div><div class="line">        <span class="comment">// 获得锁对象实例</span></div><div class="line">        RLock redissonLock = redissonUtil.getRedisson().getLock(lockName+lockKey);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//等待3秒 有效期8秒</span></div><div class="line">            resl = redissonLock.tryLock(waitTime, effectiveTime, TimeUnit.SECONDS);</div><div class="line">            <span class="keyword">if</span>(resl)&#123;</div><div class="line">               object = point.proceed(point.getArgs());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"网络错误，请重试"</span>);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(resl)&#123;</div><div class="line">                logger.info(<span class="string">"开锁,&#123;&#125;"</span>,lockName+lockKey);</div><div class="line">                redissonLock.unlock();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                logger.error(<span class="string">"未获得锁,&#123;&#125;"</span>,lockName+lockKey);</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"网络错误，请重试"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Description：获取方法的中锁参数</span></div><div class="line"><span class="comment">     * creed: Talk is cheap,show me the code</span></div><div class="line"><span class="comment">     * <span class="doctag">@author</span> name：yuxin &lt;br&gt;email: yuruixin@ixincheng.com</span></div><div class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2018/3/4 0004 下午 8:59</span></div><div class="line"><span class="comment">     **/</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  Map&lt;String,Object&gt; <span class="title">getLockParams</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String targetName = joinPoint.getTarget().getClass().getName();</div><div class="line">        String methodName = joinPoint.getSignature().getName();</div><div class="line">        Object[] arguments = joinPoint.getArgs();</div><div class="line"></div><div class="line">        Class targetClass = Class.forName(targetName);</div><div class="line">        Method[] method = targetClass.getMethods();</div><div class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Method m : method) &#123;</div><div class="line">            <span class="keyword">if</span> (m.getName().equals(methodName)) &#123;</div><div class="line">                Class[] tmpCs = m.getParameterTypes();</div><div class="line">                <span class="keyword">if</span> (tmpCs.length == arguments.length) &#123;</div><div class="line">                    Lock lock = m.getAnnotation(Lock.class);</div><div class="line">                    <span class="keyword">if</span> (lock != <span class="keyword">null</span>) &#123;</div><div class="line">                        String lockName = lock.lockName();</div><div class="line">                        <span class="keyword">int</span> waitTime = lock.waitTime();</div><div class="line">                        <span class="keyword">int</span> effectiveTime = lock.effectiveTime();</div><div class="line">                        map.put(LOCK_NAME,lockName);</div><div class="line">                        map.put(WAIT_TIME,waitTime);</div><div class="line">                        map.put(EFFECTIVE_TIME,effectiveTime);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在需要加锁的方法上添加注解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</div><div class="line"><span class="meta">@Lock</span>(lockName = <span class="string">"addCollectionApply"</span>,waitTime = <span class="number">2</span>,effectiveTime = <span class="number">3</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCollectionApply4Lock</span><span class="params">(String lockKey,CourseApplyInfo courseApplyInfo)</span></span>&#123;</div><div class="line">    <span class="comment">//业务逻辑处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文重要讲解了 AOP 的概念和原理，并提供了四个实例来帮助理解。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chuanqiang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://chuanqiang.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://chuanqiang.github.io/tags/spring/"/>
    
      <category term="AOP" scheme="http://chuanqiang.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>世间多少不平事</title>
    <link href="http://chuanqiang.github.io/2018/09/01/%E4%B8%96%E9%97%B4%E5%A4%9A%E5%B0%91%E4%B8%8D%E5%B9%B3%E4%BA%8B/"/>
    <id>http://chuanqiang.github.io/2018/09/01/世间多少不平事/</id>
    <published>2018-08-31T16:00:00.000Z</published>
    <updated>2018-09-16T12:53:25.704Z</updated>
    
    <content type="html"><![CDATA[<p>最近社会上不平事颇多  ，值得反思一下当下社会是怎么了？</p><a id="more"></a><h3 id="事件一：滴滴顺风车谋杀事件"><a href="#事件一：滴滴顺风车谋杀事件" class="headerlink" title="事件一：滴滴顺风车谋杀事件"></a>事件一：滴滴顺风车谋杀事件</h3><p>不到一百天的时间里，滴滴顺风车发生了两起乘客遇害事件。虽然滴滴只是一个平台，其和乘客之间属于居间合同关系，但滴滴作为居间人，本身负有安排真实、准确、合格、合法车辆及驾驶服务的义务。基于保证乘客安全，滴滴对于因司机信息审核不严格造成的损害，就应承担一定的赔偿责任。这种事件为什么发生呢？有个细节是一开始滴滴第一次出事之后，滴滴下线了顺风车产品，之后，滴滴推出了一系列针对顺风车的整顿措施。其中重要的一项，是将乘客的个人信息，由默认公开，变成了默认关闭。默认关闭后的乘客头像，全都变成了虚拟图像。这样一来，司机就不再能够看乘客的性别，年龄，职业和容貌。然后，滴滴顺风车宣布回归。但是，这一措施并没有维持多久，有众多顺风车司机证实，滴滴在重新上线一段时间后，将默认关闭的乘客个人信息，重新又变成了默认开放。而乘客的头像，也再次变成了真实照片。滴滴之所以这样做是想用顺风车做社交，当经济激励不足以刺激供给时，滴滴通过异性社交来拉动需求，可以说是抓住了人性啊，利用暧昧的异性社交做噱头而不管不顾乘客自身的安全，这就是滴滴的原罪。</p><p>应该说顺风车是适应社会发展的产物，在交通拥堵的矛盾和资源共享的潮流下诞生的。它的出现为人们的出行提供了便利，这本身是没问题的，但是如果法律和监管缺位，企业就会为了追求利益的最大化，而忽略了道德和底线，最终酿成大祸。</p><h3 id="事件二：自如甲醛房"><a href="#事件二：自如甲醛房" class="headerlink" title="事件二：自如甲醛房"></a>事件二：自如甲醛房</h3><p>阿里 P7 一位员工因为租住的自如房子甲醛超标，仅仅住了六个多月后身患急性白血病去世。在资本运作下，房产中介很少会把装修好的房子晾晒几个月后才租给客户，他们多会选择立马找到租客来减少成本。资本市场只管赚钱，哪管得了你的健康。</p><h3 id="事件三：昆山砍人事件"><a href="#事件三：昆山砍人事件" class="headerlink" title="事件三：昆山砍人事件"></a>事件三：昆山砍人事件</h3><p>事件经过：2018年8月27日21时30分许，刘海龙驾驶宝马轿车在昆山市震川路西行至顺帆路路口，与同向骑自行车的于海明发生争执。刘海龙从车中取出一把砍刀连续击打于海明，后被于海明反抢砍刀并捅刺、砍击数刀，刘海龙身受重伤，经抢救无效死亡。法院的判决是：于海明正当防卫，无罪。</p><p>这是一个大快人心的判决结果，正当防卫审判案例中少有的成功，这个案件必将写入我国的司法史，也说明我国的司法公正确实是在进步之中。一个江湖混子，欺负一个老实人，让老实人没活路，却不知每个人都是有血性的，逼到份上都会撸袖子跟你干！网友有打油诗一首：</p><blockquote><p>青龙朱雀身上纹<br>装逼不成反被轮<br>江湖有道江湖用<br>莫欺路上老实人</p></blockquote><p>在号称如此文明的现在，其实资本从未改变，也不需要指望它会改变，真正需要改变的是这个国家的法律、监管力度和坚守的底线。当普通民众的利益被一再的侵犯，当整个社会的底线被反复的触及，不禁要问我们的法律在哪里？我们的监管又体现在哪里？监管总是出了事情才姗姗来迟，法律也不能总用生命的代价来促进它完善。文明，就是停下来想一想自己在做什么。资本是野蛮的，人心也多是叵测和邪恶，我们必须为它们套上人性、道德和法律的枷锁，让世间不平事在烈日下曝晒，来接受恶果和恶报。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近社会上不平事颇多  ，值得反思一下当下社会是怎么了？&lt;/p&gt;
    
    </summary>
    
      <category term="独白" scheme="http://chuanqiang.github.io/categories/%E7%8B%AC%E7%99%BD/"/>
    
    
      <category term="社会" scheme="http://chuanqiang.github.io/tags/%E7%A4%BE%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>无人生还 - 书评</title>
    <link href="http://chuanqiang.github.io/2018/08/12/%E6%97%A0%E4%BA%BA%E7%94%9F%E8%BF%98%20-%20%E4%B9%A6%E8%AF%84/"/>
    <id>http://chuanqiang.github.io/2018/08/12/无人生还 - 书评/</id>
    <published>2018-08-12T02:19:47.000Z</published>
    <updated>2018-08-12T04:28:27.961Z</updated>
    
    <content type="html"><![CDATA[<p>《无人生还》是英国侦探小说女王阿加莎·克里斯蒂的代表作，讲述了一个惊悚悬疑的孤岛杀人故事。由于作者出色的笔力和巧妙的构思，整个内容步步悬疑，营造恐怖惊悚氛围的同时也紧紧抓住读者眼球。我是一气呵成读完的，读时的畅快淋漓和结局的恍然大悟，让我感受到这部作品的魅力所在。</p><p><img src="http://oeckzejn4.bkt.clouddn.com/20180812153404739522240.png" alt="无人生还.png"></p><a id="more"></a><p>小说的故事并不复杂，主要讲述了八个素不相识身份各异的人都不约而同的收到一封邀请，去德文郡海岸边一座孤岛上的豪宅。然而到那里之后，并没有出现所谓的邀请者欧文，而是只有两个临时雇来的管家罗杰斯夫妇。正当这十个人享用晚餐的时候，餐厅里的留声机忽然响起，指控宾客以及管家夫妇这十人都曾犯有谋杀罪。众人无不惊恐，纷纷掩饰自己的罪行。桌上有十个瓷娃娃，还有一首古老的童谣宛如死亡的魔咒：</p><blockquote><p>十个小士兵，出门打牙祭；不幸噎住喉，十个只剩九。<br>九个小士兵，秉烛到夜半；清早叫不答，九个只剩八。<br>八个小士兵，旅行去德文；流连不离去，八个只剩七。<br>七个小士兵，举斧砍柴火；失手砍掉头，七个只剩六。<br>六个小士兵，捅了马蜂窝；蜂来无处躲，六个只剩五。<br>五个小士兵，同去做律师；皇庭判了死，五个只剩四。<br>四个小士兵，结伴去海边；青鱼吞下腹，四个只剩三。<br>三个小士兵，动物园里耍；狗熊一巴掌，三个只剩俩。<br>两个小士兵，日头下面栖；毒日把命夺，两个只剩一。<br>一个小士兵，落单孤零零；悬梁了此生，一个也不剩。</p></blockquote><p>之后这十人按照童谣的内容一个接一个的死去，每死一个人瓷娃娃就毁坏一个，最后杀人游戏结束，也映照本书的名字——无人生还。</p><p>小说开头从每个受邀者的角度叙述了这次的孤岛之行，一方面将入场人物角色一一刻画，使他们的性格特征得以表现，为之后人物描述做铺垫；另一方面也借他们之口交代事件同时烘托了士兵岛的神秘感，吸引眼球。在踏入士兵岛之前的旅途中，从作者的描述里也能窥探一二，知道这注定是一场不平凡的路途，带着悬疑的味道，让读者发现每个人好像都有些秘密，有点问题。比如文中的一些语句：『边走边祈祷吧，”他说，“边走边祈祷。审判的日子就在眼前。』、『海面辽阔，一眼望不到边。目及之处是一片茫茫天水，海浪在落日余晖中荡起层层涟漪。 大海……今天是如此平静，可有时它又是如此凶残……把人拖入海底深渊。淹死了……他被淹死了……在海中……淹死了……淹死了……淹死了……』、『说起士兵岛，似乎总带有某种魔力。单是这个名字就让人浮想联翩。来到岛上，与世隔绝，自成一个世界。在这个世界里，你也许真就一辈子都回不去了』等等这些都是一个个的伏笔，预示着这不简单是一个受邀旅行，而是一场命运的审判，而与世隔绝的士兵岛就是行刑之地。作者没有试图在开始掩盖故事的发展和走向，相反通过字里行间让读者主动感受到这是一个有去无回的死亡之岛，烘托出惊悚的阅读氛围。并且你也能感受到童谣中的十个小士兵一一死去的命运便是岛上十人的宿命，但是真正抓住读者的是你不知道他们如何离奇的死去，每死一个人，真相便进一步，读者参与进来猜测凶手，然后随着剧情探寻真相。过程中死亡下的紧张感让人呼吸紧凑，可见作者非凡的笔力。</p><p>另外小说中的细节描写也很到位，比如宣判他们有罪的那个唱片的标题叫『天鹅绝唱』，这不是平白起的名字，而是有寓意的，查询资料才知道：传说天鹅平素不喜发声, 然而临死之前, 必定引颈长鸣, 唱出一生中唯一的、也是最后的一次歌曲–因为声音哀婉动听，感人肺腑; 是以西方文化中，将诗人、作家、画家、音乐家等等最后的作品或是最后一次演出称为“天鹅绝唱”( SWAN  SONG )。还有『每份邀请用的都是同样的首字母：尤利克·诺尔曼·欧文、乌娜·南希·欧文，也就是说，每次都是U.N.欧文。稍微联想一下就能发现，U.N是UNKNOWN的前两个字母，意思就是无名氏！』也是一个设计巧妙的地方。『他把脖子伸得老长，环视周围的人，样子好像一只发怒的乌龟』每个人的描述都符合人设和各自的职业，充分显示出作者的刻画入微。</p><p>孤岛杀人模式营造的恐怖惊悚加上作者入木三分的描写还有童谣在故事情节中的推动作用是这部小说的经典之处。</p><p>小说还很有意思的一个事情是，虽然这十个人的罪行各异，有传统腐朽礼制的捍卫者布伦特，有在金钱诱惑下道德沦丧的之人，有自私自利不惜杀人者。。。他们的罪行或多或少都是社会时代的产物，但他们都是『无证之罪』，侥幸逃脱了法律的制裁，而具有双重性格的法官瓦格雷夫却因为性格和职业原因代替了法律『伸张正义』，把他们审判与孤岛之上。由于凶手瓦格雷夫矛盾的双重性格：『小时候起，我就知道自己对杀戮有着无比强烈的欲望。』和『我同时还拥有一种强烈的正义感。我痛恨因为我的所作所为让无辜的人或生物遭受磨难或者死亡。我一直深深地感到，正义应该战胜一切』，让他萌生出一种罪恶的想法：『让我坦白说吧，我想亲手杀人。 我意识到这就像一位艺术家极力想表现自我一样！没错，我想变成一个犯罪学艺术家。我被法官这个职业所束缚，我的想象力被压抑着，逐渐变成一股巨大的力量』，正是由于这个动机，铸就了一起孤岛杀人事件，最后凶手也选择自杀。这种代替法律的『伸张正义』也让人重新思考法律和伦理的关系，当法律触碰不到的阴暗面，究竟该如何解决？</p><p>小岛对于一些人来说是恐怖的命运终结之所，而对麦克阿瑟将军来说却是万物的归处：『他心想，小岛的好处就在于与世隔绝，谁也别想独自离开，就像是来到了万事的归处。 他忽然发现，自己根本不想离开这座岛』，虽然罪行被揭露，命运被审判，但隐藏多年的心灵枷锁被打开，内心的沉重被释放。</p><p>虽然你能逃脱法律的制裁，但最终逃离不了良心的审问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《无人生还》是英国侦探小说女王阿加莎·克里斯蒂的代表作，讲述了一个惊悚悬疑的孤岛杀人故事。由于作者出色的笔力和巧妙的构思，整个内容步步悬疑，营造恐怖惊悚氛围的同时也紧紧抓住读者眼球。我是一气呵成读完的，读时的畅快淋漓和结局的恍然大悟，让我感受到这部作品的魅力所在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oeckzejn4.bkt.clouddn.com/20180812153404739522240.png&quot; alt=&quot;无人生还.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="书评" scheme="http://chuanqiang.github.io/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
      <category term="书评" scheme="http://chuanqiang.github.io/tags/%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>天津旅游观感</title>
    <link href="http://chuanqiang.github.io/2018/07/21/%E5%A4%A9%E6%B4%A5%E6%97%85%E6%B8%B8%E8%A7%82%E6%84%9F/"/>
    <id>http://chuanqiang.github.io/2018/07/21/天津旅游观感/</id>
    <published>2018-07-21T09:03:11.000Z</published>
    <updated>2018-07-21T09:12:47.287Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，虽然天津离北京只一站之遥，但仍没有抽出时间去转转。总觉得这么近，什么时候去都行，然后就在这种心理下一拖再拖，忽略了许多触手可及的风景。这也是大部分人的通病吧：凡是触手可及的总不知珍惜。有些东西确确实实在不远的那里，但是如果你不走近，那便是相隔万里。</p><a id="more"></a><p>订票的时候才发现原来天津离北京这么近，高铁半个小时，打个盹的功夫，去天津简直比我在北京去公司还快。同样车票也很便宜，高铁五十几块，火车不到二十。一直比较迷惑为什么天津和北京相隔如此之近，但是口音、文还和饮食都相差如此之大。之前对天津的感触只是天津独特的口音还有天津相声以及《霍元甲》里那句『霍元甲你嘛时候成为津门第一啊』。</p><p>一下天津车站，和北京一样，无需出火车站，直接可以换乘地铁。天津西站地铁站内部的吊灯很精致，感受到了些许欧洲风情。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153215968638222.jpg" alt="地铁站的吊灯"></p><p>先去了天津周边逛，放眼望去，能看到许多红色穹顶的略微带欧式风格的建筑，清水红砖墙配以灰色水泥檐口与墙裙带来了一丝活泼和新鲜感。当然也有现代化的高楼大厦拔地而起，现代风格和古欧洲风格并存。看这些建筑，可以感受到包容、吸收的特征，提现了天津多元化的构成和与时俱进的品位。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216024064543.jpg" alt="中西融合的建筑"><br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216086830588.jpg" alt=""><br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216193286699.jpg" alt="世纪钟"><br>其实，来天津游玩，很重要的是为了来看天津这个城市的建筑。天津，在近代史上很长一段时间是列强设立租界的地方，这使得天津的历史风貌建筑多以西洋建筑为代表。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216294055039.jpg" alt="路边雕塑"><br>位于解放北路的一组欧洲风格的银行、商家和饭店所构成的西洋古典建筑群是天津历史风貌建筑的典型代表，如采用爱奥尼柱式柱廊、严谨古典主义风格的天津汇丰银行大楼、英国古典风格的天津利顺德饭店、古典复兴主义风格的原中央银行天津分行大楼、兼具科林斯柱式和塔斯干柱式廊柱的原中法工商银行大楼等。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216095476840.jpg" alt=""><br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216177359235.jpg" alt=""><br>五大道上的历史风貌建筑更是在民间被称为“万国建筑博物馆”。五大道上比较有代表性的建筑有曼塞尔式红瓦坡顶的法国罗曼式原天津工商学院主楼、庆王府、疙瘩楼、达文士楼等。天津意式风情区，原为天津意租界，是意大利殖民地中唯一的租界，亦是亚洲唯一一处具有意大利风格的大型建筑群。区内云集着大量地中海风格的历史风貌建筑，如原回力球馆、意大利兵营、梁启超旧居、汤玉麟旧宅等。原处于法租界的和平路沿线也分布着劝业场、惠中饭店、浙江兴业银行、东莱银行、国民饭店、渤海大楼等历史风貌建筑。而一些优秀的西方宗教建筑如法国罗曼式风格的西开教堂、犹太教风格的天津犹太教堂、哥特式风格的望海楼教堂和安里甘教堂等也成为天津历史风貌建筑中的精品。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216097948845.jpg" alt="西开教堂"></p><p>着重说下『西开教堂』，这是我第一次见如此纯正壮观的教堂。西开教堂是天津市最大的罗马式建筑，也是天主教天津教区的主教座堂。西开教堂的建筑风格属于罗曼式，有三个并列的绿色穹顶，高达45米，每座穹顶上有一个青铜十字架。西开教堂建筑主体是用红黄色花砖砌造的，教堂内有许多壁画和大管风琴，前面院中有圣水坛，有左右两道大门，信徒分男女从不同的门入内。室内八角形的穹窿顶及侧窗均以彩色玻璃嵌作画。内墙彩绘壁画，装饰华丽，充满宗教神秘气息。去的时候，正赶上午间11：30的弥撒时间，是英文的祷告，不让拍照，在网上找了幅图：<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216126956183.png" alt="西开教堂内部"></p><p>文革高峰时期，西开教堂成为红卫兵大扫荡和大批判的主要阵地，建筑墙面上贴着『砸的对，砸的好』以及炮轰黑教等巨幅标语，红卫兵焚烧《圣经》及各种宗教印刷品，捣毁堂内外诸多设施器物，甚至欲砸烂教堂。但由于教堂过于结识庞大，才得以幸存。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216155275132.png" alt="文革时期的西开教堂"></p><p>历史如烟，现在西开教堂人流不息，圣母玛利亚在花和蜡烛中，不时有人在那本打开的石制圣经前默默祈祷。</p><p>天津还有一个独特的建筑，真的让我大开眼界——瓷房子<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216213492866.jpg" alt="瓷房子"><br>它的前身是历经百年的法式老洋楼，它的今生是极尽奢华的“瓷美楼奇”。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216222262305.png" alt="瓷房子顶部"></p><p>除了建筑，海河可以说是构筑天津风景最重要的部分，也是天津最重要的明信片。天津位于华北平原海河五大支流汇流处，东临渤海，北依燕山，海河在城中蜿蜒而过，海河是天津的母亲河，海哥横穿天津市区，形成一副美丽的都市风情画卷。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216184457321.jpg" alt="海河静静流过"><br>最让人眷恋的还是夜幕笼罩之后的海河，华灯初上，海河流水映照着两岸波澜的灯光，落霞与高楼齐飞，灯光与流水共舞。她有一个很好听的名字，叫做『沽水流霞』。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216201265147.jpg" alt="暮色下的天津和海河"><br>当然还有天津之眼，夜晚的摩天轮披上华丽的服饰，像巨人伫立在那里，用巨大的独眸，注释着喧嚣热闹的尘世。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216206353085.jpg" alt="天津之眼"><br>海河两岸的人民是幸福的，闲暇时分，夕阳西下，漫步在海河两岸，看大河东去，祥云渺茫，灯光闪闪，不禁会让人生出美好的记忆。</p><p>在天津去了两条街，一条是『意大利风情街』，满满的欧式风格建筑群；另一条是『古文化街』，扑面而来的中式风韵。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216257134156.png" alt="意大利风情街"><br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216238424396.jpg" alt="古文化街"></p><p>去古文化节看杨柳青的年画，赏泥人张的泥塑，吃东北角总店的耳朵眼，喝津门的杨氏茶汤，当然还有天津大麻花。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180721153216280493045.png" alt="泥人张"></p><p>天津这个城市，有自己的特色和内涵，独特的建筑、美丽的海河风景、特色的口音和饮食都是她的明信片，是个值得去一次的城市。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说来惭愧，虽然天津离北京只一站之遥，但仍没有抽出时间去转转。总觉得这么近，什么时候去都行，然后就在这种心理下一拖再拖，忽略了许多触手可及的风景。这也是大部分人的通病吧：凡是触手可及的总不知珍惜。有些东西确确实实在不远的那里，但是如果你不走近，那便是相隔万里。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://chuanqiang.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="游记" scheme="http://chuanqiang.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="天津" scheme="http://chuanqiang.github.io/tags/%E5%A4%A9%E6%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>信息侵袭时代的生存指南</title>
    <link href="http://chuanqiang.github.io/2018/06/30/%E4%BF%A1%E6%81%AF%E4%BE%B5%E8%A2%AD%E6%97%B6%E4%BB%A3%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/"/>
    <id>http://chuanqiang.github.io/2018/06/30/信息侵袭时代的生存指南/</id>
    <published>2018-06-30T08:54:33.000Z</published>
    <updated>2018-08-10T10:54:40.224Z</updated>
    
    <content type="html"><![CDATA[<p>我们已经从一个信息匮乏的时代，走到了一个信息过剩的时代。但我们的大脑，却仍然保持着数十年、甚至上百年前的信息处理能力，没有任何提升。这带来的结果是什么呢？就是「信息」和「处理」的严重不匹配。</p><p>我们的信息触觉越来越敏锐，但却同时也越来越「空虚」。</p><p>信息大爆炸时代，其实正在不知不觉之中，侵袭着我们的生活，把我们变得又懒又笨。</p><a id="more"></a><h3 id="1-大脑"><a href="#1-大脑" class="headerlink" title="1. 大脑"></a>1. 大脑</h3><p>这几年，互联网整体的戾气，越来越重了。</p><p>拿知乎举例。很多人说，12-14年，是知乎的黄金时期。黄金在何处？不仅仅是因为内容质量高，也因为整体气氛十分和谐。有不同意见？另起一个回答反驳便是。攻方有礼有节，守方不卑不亢。一轮讨论下来，仍旧一片融洽，几无烟火气。但如今呢？不说知乎，在整个中文互联网上，随便一个帖子下面，总会见到各种谩骂、嘲讽、攻讦、抬杠、阴阳怪气……无论讨论什么问题，永远都要先分清楚「站队」和「友军」；只要跟自己意见相左，要么扣上帽子，要么口出恶言，一定要从气势上压倒对方；「理客中」开始成为一个贬义词，大家越来越倾向于极端、情绪化，但凡中立，都会被目为「洗地」；</p><p>当然，这种现象的原因是极其复杂的。有用户下沉的缘故，有网民整体素质的缘故，也有平台吸引流量的缘故……但不可忽视的原因，是海量信息所带来的「群体极化」：简单来说，假设有一个小群体，由100个人组成，每个人都有着某种倾向（比如「反对特朗普」）。那么，他们所组成的群体，总体的倾向跟个人一样，但是在程度上，会更极端、更激进。（这是社会学里一个非常经典的理论，也有着非常多的论述）</p><p>有论文指出：在网络讨论中，许多人到最后，都会形成一个同质的「兴趣共同体」。他们会主动搜索和传播己方观点，并借此辨别朋友和敌人。这个兴趣共同体一旦形成，就会自发地形成一层「盾牌」，排斥一切对立观点，从而维护其稳定性。</p><p>那么，为什么会产生「群体极化」和「兴趣共同体」呢？一个很重要的原因，是人天生具备两种倾向：<strong>证实性偏见，以及逆火效应</strong>。</p><p><strong>前者是说：对我们接触到的信息，我们会给「立场一致」的信息赋予更高权重，更容易接受它们。而后者是说：当我们接触到立场相反的信息时，如果信息的说服力不够，反而会加强我们对原有立场的信念。</strong>简单来说就是：「你的反驳如此拙劣，看来我的观点一定是对的，你才无话可说。」</p><p>重点是什么呢？在这个时代，各种媒体为了吸引眼球，喜欢剑走偏锋。能撩拨情绪、走极端方向的，就一定不会中立。每个人都在追热点、制造争议，越是有争议的内容，越是石破天惊的观点，就越容易吸引关注。</p><p>他们的套路是什么？制造对立。只要你内心里有偏向，他们就会竭力让你敌视另一方，找到「归属感」，从而给你贴上标签，成为他们的「铁粉」和「基本盘」。哪怕是比较善良的媒体，在这个「理客中」被人嫌弃的时代，你也很难要求他们做到毫无偏颇，客观呈现对立双方观点。</p><p>所以，这就是一个恶性循环。只要你有倾向 —— 哪怕只是10% —— 你也很容易被各种信息所影响、扭曲、站队。它们就如同引力一般，不断地往同一个方向拉扯着你。最终的结果，就是变成20%、30%，乃至100%。</p><h3 id="2-眼睛"><a href="#2-眼睛" class="headerlink" title="2. 眼睛"></a>2. 眼睛</h3><p>信息大爆炸，不但会促进「群体极化」，还会把我们困在一个个「信息气泡」之中。</p><p>什么是信息气泡呢？我举个例子。</p><p>正常刷知乎时，我只看「关注」频道 —— 基本是一堆博士生、优秀回答者，在聊心理学、经济学、神经科学。偶尔翻翻推荐，也都还在水准之上。因此，我一直对「知乎越来越水了」不以为然。直到有一天，账号掉线，需要重新登陆，我得以用游客模式看到知乎，不禁倒吸一口凉气：满屏幕的「网赚兼职」、娱乐八卦、地摊文学、「擦边球」，甚至还有看相算命的……</p><p>这是如何造成的？很大程度上，是各种内容分发平台「顺应喜好」「千人千面」「私人订制」的结果。</p><p>传播学大师李普曼提出过一个「拟态世界」的理论。他说：<strong>我们对真实世界的感知，并不是客观的，而是由各种媒介把信息进行加工、筛选之后，灌输给我们的。每个人接收到的信息都不同，所感知到的世界也就都不同。</strong></p><p>这些不同的感知世界，就是「拟态世界」，也就是一个个「信息气泡」。</p><p>我们都活在由自己筛选出来的信息所构筑的「气泡」里。<strong>这些气泡反射着外面的世界，让我们以为，那就是真实</strong>。</p><p>这些气泡是如何构筑的呢？</p><p>我们总会有一种倾向：在日常生活中，我们对某个对象越熟悉、信息越多，就越倾向于把它放到重要的位置上。也就是说，在我们的认知中，世界是这样的：最核心的位置是我们自己，内层是我们的朋友、同行、所处的行业，更外层是我们感兴趣的领域，常看的内容平台，再外层是我们向往的阶层……诸如此类。</p><p>而在这个「气泡」之外，有大量的人和事物（可能超过99%），是永远不会落入我们视野的。</p><p>这就是「信息气泡」所造成的，拟态世界与真实世界的脱节。</p><p>更可怕的是，这种现象对每个人都不例外。很多非常优秀的人，都多多少少存在同样的问题：视野狭窄，对「气泡」之外的世界非常陌生，甚至是戒备和轻视 —— 因为，在他们的「气泡」中，这些东西是看不到的，因而也是无价值的。</p><p>一旦熟悉的环境发生变化，所造成的冲击，很可能十分严重。</p><p>所以，我经常说，<strong>最难得的品质，是能够不断颠覆自己，拓展认知边界</strong> —— 尽管这是一件非常痛苦的事情。</p><p>但只有这样，你才能看到更广阔的世界。</p><h3 id="3-手"><a href="#3-手" class="headerlink" title="3. 手"></a>3. 手</h3><p>当大量信息变得触手可及的同时，也就磨灭了我们的动手能力。</p><p>这个时代，花大量时间去获取信息，成为一件性价比很低的事情 —— 有的是平台把信息做好，打包，整合，喂给你，为什么要花心思、花力气去获取呢？</p><p>但你有没有想过：信息的获取门槛非常低，就意味着什么？意味着谁都能够触及。亦即它失去了竞争力。</p><p>所以，我很少会去看畅销书，也很少去跟热门的产品。原因很简单。一个东西变得「热门」了，只能说明两件事：</p><blockquote><p>第一，它为了适应大众，把自己给简单化和庸俗化了。<br>第二，它已经成为家喻户晓的「常识」，你再去掌握它，已经没有太大意义。</p></blockquote><p>被动依赖于某个系统，你就永远无法超越这个系统，只会一直受制于它。</p><p>重要的信息，哪怕是可靠的来源，我也不会照盘全收，而是会退一步，先审视，再验证。</p><p>需要的东西，我绝不会假手于人，一定会自己亲手去搜索和获取。然后，再把它跟别人所提供的，做一个对比和整合。</p><p>比起「热门」，我更重视「前沿」。比起「别人都在聊什么」「我如何才能跟上他们」，我更注重「别人不知道什么」「别人可能需要什么」「我如何才能为他们提供价值」。</p><p>这就是我强调独立思考和深度思考的缘故：永远不要把自己思考、判断、决策的权利，拱手交给别人。否则，你就是在被别人所操纵。</p><p>不要让别人的大脑替你去思考。</p><h3 id="如何帮助我们在这个信息爆炸时代，不被外界所同化"><a href="#如何帮助我们在这个信息爆炸时代，不被外界所同化" class="headerlink" title="如何帮助我们在这个信息爆炸时代，不被外界所同化"></a>如何帮助我们在这个信息爆炸时代，不被外界所同化</h3><h4 id="1-化被动为主动"><a href="#1-化被动为主动" class="headerlink" title="1. 化被动为主动"></a>1. 化被动为主动</h4><p>时刻记住：「我」才是思考和决策的核心。不要依赖外界。不要做「伸手党」。</p><h4 id="2-化认同为破壁"><a href="#2-化认同为破壁" class="headerlink" title="2. 化认同为破壁"></a>2. 化认同为破壁</h4><p>拓展认知边界，最基本的，就是不断去接触自己不了解的领域，以及不同意的立场。这是一个艰难的过程 —— 你需要不断跟内心作斗争，需要耐心。但是，你会慢慢发现，很多观点，也许并不如你最初所想的那样。甚至，有的时候，你需要放弃自己习以为常的思维模式，完全跳脱出来，去理解新的事物 —— 训练营第一课的同学，对此一定深有感触。</p><p>有一个方法是：当自己阅读一本书、学习一个知识点的时候，不断反问自己：</p><p>关于这个领域，我的基本假设和立场是什么？</p><p>如果站到对立面去，会怎么样？</p><p>如果完全抛弃这些框架，从零接触这些信息，会怎么样？</p><p>这很困难，但只有这样，你才能从更高的层次审视自己，发现自己原本所看到的世界，只是很小的一个角落；自己原本所坚持的信念，也未必完全100%正确。</p><p>这就是一个「正 - 反 - 合」的过程。也是不断认知升级、自我迭代的过程。</p><h4 id="3-化断定为假设"><a href="#3-化断定为假设" class="headerlink" title="3. 化断定为假设"></a>3. 化断定为假设</h4><p>我们的大脑有一个缺陷：喜欢确定的东西，不喜欢不确定、不可控和不可知。但现实中呢？我们所生存着的，是一个概率世界。绝大多数情况下，能够100%确定的场合，极其稀少。更多的时候是什么？先做出一个假设，再去检验它，然后谨慎应用它，寻找它的漏洞并不断完善。这其实就是科学的思维方法和研究范式。</p><p>所以，在生活中，我会极其慎重地使用「绝对性」的语言：我很少告诉你「它一定如何如何」「必然怎样怎样」，而会说「很大程度」「一个重要原因」「很多时候是」……同样，我不希望你100%全盘接受我的内容，我希望你同步去思考：他说得对不对？有没有什么漏洞？我可以如何获取信息来增加了解？如果有不同的观点，更好的做法是什么呢？是自己寻找资料，来支撑或削弱自己的观点，然后把两个观点放到一起，进行对比，看哪一方更有说服力，更具备普遍性。与此同时，做好它被推翻和证伪的心理准备。</p><p>没有什么东西是永恒不变的，除了变化本身。这才是让自己跳出信息的枷锁，让信息「为我所用」的方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们已经从一个信息匮乏的时代，走到了一个信息过剩的时代。但我们的大脑，却仍然保持着数十年、甚至上百年前的信息处理能力，没有任何提升。这带来的结果是什么呢？就是「信息」和「处理」的严重不匹配。&lt;/p&gt;
&lt;p&gt;我们的信息触觉越来越敏锐，但却同时也越来越「空虚」。&lt;/p&gt;
&lt;p&gt;信息大爆炸时代，其实正在不知不觉之中，侵袭着我们的生活，把我们变得又懒又笨。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chuanqiang.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="观点" scheme="http://chuanqiang.github.io/tags/%E8%A7%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Quartz 入门教程</title>
    <link href="http://chuanqiang.github.io/2018/06/24/Quartz%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://chuanqiang.github.io/2018/06/24/Quartz 入门教程/</id>
    <published>2018-06-24T11:57:57.000Z</published>
    <updated>2018-06-25T02:07:58.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、关于-Quartz"><a href="#一、关于-Quartz" class="headerlink" title="一、关于 Quartz"></a>一、关于 Quartz</h2><p><img src="http://oeckzejn4.bkt.clouddn.com/20180623152976524823664.png" alt="Quartz logo"></p><a id="more"></a><ul><li>Quartz 是一个完全由 Java 编写的开源作业调度框架，为在 Java 应用程序中进行作业调度提供了简单却强大的机制。</li><li>Quartz 可以与 J2EE 与 J2SE 应用程序相结合也可以单独使用。</li><li>Quartz 允许程序开发人员根据时间的间隔来调度作业。</li><li>Quartz 实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。</li></ul><h2 id="二、Quartz-核心概念"><a href="#二、Quartz-核心概念" class="headerlink" title="二、Quartz 核心概念"></a>二、Quartz 核心概念</h2><p><img src="http://oeckzejn4.bkt.clouddn.com/20180623152976577089638.png" alt="核心组件"></p><ul><li>Scheduler：调度容器</li><li>Job：Job接口类，即被调度的任务</li><li>JobDetail ：Job的描述类，job执行时的依据此对象的信息反射实例化出Job的具体执行对象。</li><li>Trigger：触发器，存放Job执行的时间策略。用于定义任务调度时间规则。</li><li>JobStore： 存储作业和调度期间的状态</li><li>Calendar：指定排除的时间点（如排除法定节假日）</li></ul><h4 id="job"><a href="#job" class="headerlink" title="job"></a>job</h4><p>  Job 是一个接口，只有一个方法  <code>void execute(JobExecutionContext context)</code>，开发者实现接口来定义任务。<code>JobExecutionContext</code> 类提供了调度上下文的各种信息。Job 运行时的信息保存在 <code>JobDataMap</code> 实例中。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">implements</span> <span class="title">BaseJob</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger _log = LoggerFactory.getLogger(HelloJob.class);  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloJob</span><span class="params">()</span> </span>&#123; &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line">        _log.error(<span class="string">"Hello Job执行时间: "</span> + <span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="JobDetailImpl-类-JobDetail-接口"><a href="#JobDetailImpl-类-JobDetail-接口" class="headerlink" title="JobDetailImpl 类 / JobDetail 接口"></a>JobDetailImpl 类 / JobDetail 接口</h4><p><code>JobDetailImpl</code>类实现了<code>JobDetail</code>接口，用来描述一个 job，定义了job所有属性及其 <code>get/set</code> 方法。下面是 job 内部的主要属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">属性名 | 说明</div><div class="line">class  |必须是job实现类（比如`JobImpl`），用来绑定一个具体`job`  </div><div class="line">name  | job 名称。如果未指定，会自动分配一个唯一名称。所有job都必须拥有一个唯一`name`，如果两个 job 的`name`重复，则只有最前面的 job 能被调度 </div><div class="line">group  | job 所属的组名  </div><div class="line">description | job描述 </div><div class="line">durability  |是否持久化。如果job设置为非持久，当没有活跃的`trigger`与之关联的时候，job 会自动从`scheduler`中删除。也就是说，非持久`job`的生命期是由`trigger`的存在与否决定的  </div><div class="line">shouldRecover | 是否可恢复。如果 job 设置为可恢复，一旦 job 执行时`scheduler`发生`hard shutdown`（比如进程崩溃或关机），当`scheduler`重启后，该`job`会被重新执行  </div><div class="line">jobDataMap | 除了上面常规属性外，用户可以把任意`kv`数据存入`jobDataMap`，实现 job 属性的无限制扩展，执行 job 时可以使用这些属性数据。此属性的类型是`JobDataMap`，实现了`Serializable`接口，可做跨平台的序列化传输</div></pre></td></tr></table></figure></p><h4 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h4><p>是一个类，描述触发Job执行的时间触发规则。主要有  <code>SimpleTrigger</code>  和  <code>CronTrigger</code>  这两个子类。当仅需触发一次或者以固定时间间隔周期执行，<code>SimpleTrigger</code>是最适合的选择；而<code>CronTrigger</code>则可以通过<code>Cron</code>表达式定义出各种复杂时间规则的调度方案：如每早晨9:00执行，周一、周三、周五下午5:00执行等；</p><p>以下是 trigger 的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">属性名 | 属性类型  | 说明   </div><div class="line">name  | 所有trigger通用  | trigger名称 </div><div class="line"> group  | 所有trigger通用 |  trigger所属的组名  </div><div class="line">description  | 所有trigger通用  | trigger描述  </div><div class="line">calendarName  | 所有trigger通用  | 日历名称，指定使用哪个Calendar类，经常用来从trigger的调度计划中排除某些时间段  </div><div class="line">misfireInstruction  | 所有trigger通用  | 错过job（未在指定时间执行的job）的处理策略，默认为MISFIRE\_INSTRUCTION\_SMART\_POLICY。详见这篇[blog](https://link.jianshu.com?t=http%3A%2F%2Fblog.csdn.net%2Fspbdev%2Farticle%2Fdetails%2F41679477)[^Quartz misfire](https://link.jianshu.com?t=%255BSpbDev%255D%28http%3A%2F%2Fmy.csdn.net%2FSpbDev%29%25EF%25BC%259A%255BQuartz%25E7%259A%2584misfire%255D%28http%3A%2F%2Fblog.csdn.net%2Fspbdev%2Farticle%2Fdetails%2F41679477%29)   </div><div class="line">priority  | 所有trigger通用  | 优先级，默认为5。当多个trigger同时触发job时，线程池可能不够用，此时根据优先级来决定谁先触发  </div><div class="line">jobDataMap  | 所有trigger通用 |  同job的jobDataMap。假如job和trigger的jobDataMap有同名key，通过getMergedJobDataMap()获取的jobDataMap，将以trigger的为准  </div><div class="line">startTime  | 所有trigger通用  | 触发开始时间，默认为当前时间。决定什么时间开始触发job  </div><div class="line">endTime  | 所有trigger通用  | 触发结束时间。决定什么时间停止触发job  </div><div class="line">nextFireTime |  SimpleTrigger私有  | 下一次触发job的时间 </div><div class="line">previousFireTime |  SimpleTrigger私有  | 上一次触发job的时间  </div><div class="line">repeatCount  | SimpleTrigger私有  | 需触发的总次数 </div><div class="line">timesTriggered  | SimpleTrigger私有  | 已经触发过的次数  </div><div class="line">repeatInterval  | SimpleTrigger私有  | 触发间隔时间</div></pre></td></tr></table></figure></p><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p><code>org.quartz.Calendar</code>和 <code>java.util.Calendar</code>不同，它是一些日历特定时间点的集合（可以简单地将<code>org.quartz.Calendar</code>看作<code>java.util.Calendar</code>的集合——<code>java.util.Calendar</code>代表一个日历时间点，无特殊说明后面的<code>Calendar</code>即指<code>org.quartz.Calendar</code>）。一个Trigger可以和多个Calendar关联，以便排除或包含某些时间点。假设，我们安排每周星期一早上10:00执行任务，但是如果碰到法定的节日，任务则不执行，这时就需要在<code>Trigger</code>触发机制的基础上使用Calendar进行定点排除。</p><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>调度器，代表一个<strong>Quartz</strong>的独立运行容器，好比一个『大管家』，这个大管家应该可以接受 <code>Job</code>， 然后按照各种<code>Trigger</code>去运行，<strong>Trigger</strong>和<strong>JobDetail</strong>可以注册到Scheduler中，两者在Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，<strong>Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一</strong>（但可以和Trigger的组和名称相同，因为它们是不同类型的）。Scheduler定义了多个接口方法，允许外部通过组及名称访问和控制容器中Trigger和JobDetail。</p><p><img src="http://oeckzejn4.bkt.clouddn.com/20180623152976544130422.png" alt=""><br>Scheduler 可以将 Trigger 绑定到某一 JobDetail 中，这样当 Trigger 触发时，对应的 Job 就被执行。可以通过 SchedulerFactory创建一个 Scheduler 实例。Scheduler 拥有一个 SchedulerContext，它类似于 ServletContext，保存着 Scheduler 上下文信息，Job 和 Trigger 都可以访问 SchedulerContext 内的信息。SchedulerContext 内部通过一个 Map，以键值对的方式维护这些上下文数据，SchedulerContext 为保存和获取数据提供了多个 put() 和 getXxx() 的方法。可以通过<code>Scheduler# getContext()</code>获取对应的<code>SchedulerContext</code>实例；</p><h4 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h4><p>Scheduler 使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程提高运行效率。</p><h4 id="进行一个定时任务的简单实例"><a href="#进行一个定时任务的简单实例" class="headerlink" title="进行一个定时任务的简单实例"></a>进行一个定时任务的简单实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobTest</span> <span class="keyword">implements</span> <span class="title">BaseJob</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> org.slf4j.Logger log = LoggerFactory.getLogger(JobTest.class);</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line">log.error(<span class="string">"JobTest 执行时间: "</span> + <span class="keyword">new</span> Date());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quartzTest</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException</span>&#123;</div><div class="line">    <span class="comment">// 1. 创建 SchedulerFactory</span></div><div class="line">    SchedulerFactory factory = <span class="keyword">new</span> StdSchedulerFactory();</div><div class="line">    <span class="comment">// 2. 从工厂中获取调度器实例</span></div><div class="line">    Scheduler scheduler = factory.getScheduler();</div><div class="line"></div><div class="line">    <span class="comment">// 3. 引进作业程序</span></div><div class="line">    JobDetail jobDetail = JobBuilder.newJob(JobTest.class).withDescription(<span class="string">"this is a ram job"</span>) <span class="comment">//job的描述</span></div><div class="line">            .withIdentity(<span class="string">"jobTest"</span>, <span class="string">"jobTestGrip"</span>) <span class="comment">//job 的name和group</span></div><div class="line">            .build();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> time=  System.currentTimeMillis() + <span class="number">3</span>*<span class="number">1000L</span>; <span class="comment">//3秒后启动任务</span></div><div class="line">    Date statTime = <span class="keyword">new</span> Date(time);</div><div class="line"></div><div class="line">    <span class="comment">// 4. 创建Trigger</span></div><div class="line">    <span class="comment">//使用SimpleScheduleBuilder或者CronScheduleBuilder</span></div><div class="line">    Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">            .withDescription(<span class="string">"this is a cronTrigger"</span>)</div><div class="line">            .withIdentity(<span class="string">"jobTrigger"</span>, <span class="string">"jobTriggerGroup"</span>)</div><div class="line">            <span class="comment">//.withSchedule(SimpleScheduleBuilder.simpleSchedule())</span></div><div class="line">            .startAt(statTime)  <span class="comment">//默认当前时间启动</span></div><div class="line">            .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">"0/2 * * * * ?"</span>)) <span class="comment">//两秒执行一次</span></div><div class="line">            .build();</div><div class="line"></div><div class="line">    <span class="comment">// 5. 注册任务和定时器</span></div><div class="line">    scheduler.scheduleJob(jobDetail, trigger);</div><div class="line"></div><div class="line">    <span class="comment">// 6. 启动 调度器</span></div><div class="line">    scheduler.start();</div><div class="line">    _log.info(<span class="string">"启动时间 ： "</span> + <span class="keyword">new</span> Date());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="三、Quartz-设计分析"><a href="#三、Quartz-设计分析" class="headerlink" title="三、Quartz 设计分析"></a>三、Quartz 设计分析</h2><h3 id="quartz-properties文件"><a href="#quartz-properties文件" class="headerlink" title="quartz.properties文件"></a>quartz.properties文件</h3><p>Quartz 有一个叫做<code>quartz.properties</code>的配置文件，它允许你修改框架运行时环境。缺省是使用 <code>Quartz.jar</code> 里面的<code>quartz.properties</code> 文件。你应该创建一个 <code>quartz.properties</code> 文件的副本并且把它放入你工程的 classes 目录中以便类装载器找到它。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// 调度标识名 集群中每一个实例都必须使用相同的名称 （区分特定的调度器实例） </div><div class="line">org.quartz.scheduler.instanceName：DefaultQuartzScheduler </div><div class="line">// ID设置为自动获取 每一个必须不同 （所有调度器实例中是唯一的） </div><div class="line">org.quartz.scheduler.instanceId ：AUTO </div><div class="line">// 数据保存方式为持久化 </div><div class="line">org.quartz.jobStore.class ：org.quartz.impl.jdbcjobstore.JobStoreTX </div><div class="line">// 表的前缀 </div><div class="line">org.quartz.jobStore.tablePrefix ： QRTZ_ </div><div class="line">// 设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题 </div><div class="line">// org.quartz.jobStore.useProperties ： true </div><div class="line">// 加入集群 true 为集群 false不是集群 </div><div class="line">org.quartz.jobStore.isClustered ： false </div><div class="line">// 调度实例失效的检查时间间隔 </div><div class="line">org.quartz.jobStore.clusterCheckinInterval：20000 </div><div class="line">// 容许的最大作业延长时间 </div><div class="line">org.quartz.jobStore.misfireThreshold ：60000 </div><div class="line">// ThreadPool 实现的类名 </div><div class="line">org.quartz.threadPool.class：org.quartz.simpl.SimpleThreadPool </div><div class="line">// 线程数量 </div><div class="line">org.quartz.threadPool.threadCount ： 10 </div><div class="line">// 线程优先级 </div><div class="line">// threadPriority 属性的最大值是常量 java.lang.Thread.MAX_PRIORITY，等于10。最小值为常量 java.lang.Thread.MIN_PRIORITY，为1</div><div class="line">org.quartz.threadPool.threadPriority ： 5</div><div class="line">// 自创建父线程 </div><div class="line">//org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread： true </div><div class="line">// 数据库别名 </div><div class="line">org.quartz.jobStore.dataSource ： qzDS </div><div class="line">// 设置数据源 </div><div class="line">org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver </div><div class="line">org.quartz.dataSource.qzDS.URL:jdbc:mysql://localhost:3306/quartz </div><div class="line">org.quartz.dataSource.qzDS.user:root </div><div class="line">org.quartz.dataSource.qzDS.password:123456 </div><div class="line">org.quartz.dataSource.qzDS.maxConnection:10</div></pre></td></tr></table></figure></p><h3 id="Quartz-调度器"><a href="#Quartz-调度器" class="headerlink" title="Quartz 调度器"></a>Quartz 调度器</h3><p>Quartz框架的核心是调度器。调度器负责管理Quartz应用运行时环境。启动时，框架初始化一套<code>worker</code>线程，这套线程被调度器用来执行预定的作业。这就是 Quartz 怎样能并发运行多个作业的原理。Quartz 依赖一套松耦合的线程池管理部件来管理线程环境。</p><h3 id="两种作业存储方式"><a href="#两种作业存储方式" class="headerlink" title="两种作业存储方式"></a>两种作业存储方式</h3><h4 id="1-RAMJobStore"><a href="#1-RAMJobStore" class="headerlink" title="1. RAMJobStore"></a>1. RAMJobStore</h4><pre><code>- 通常的内存来持久化调度程序信息。这种作业存储类型最容易配置、构造和运行。- 因为这种方式的调度程序信息是被分配到 JVM 内存中，所以，当应用程序停止运行时，所有调度信息将被丢失。如果你需要在重新启动之间持久化调度信息，则将需要第二种类型的作业存储。 </code></pre><h4 id="2-JDBC作业存储"><a href="#2-JDBC作业存储" class="headerlink" title="2. JDBC作业存储"></a>2. JDBC作业存储</h4><pre><code>- 需要JDBC驱动程序和后台数据库来持久化调度程序信息（支持集群）</code></pre><h5 id="表关系和解释"><a href="#表关系和解释" class="headerlink" title="表关系和解释"></a>表关系和解释</h5><p><img src="http://oeckzejn4.bkt.clouddn.com/20180624152983097394657.png" alt="表关系"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">表名称 | 说明</div><div class="line">qrtz_blob_triggers | Trigger作为Blob类型存储(用于Quartz用户用JDBC创建他们自己定制的Trigger类型，JobStore 并不知道如何存储实例的时候)</div><div class="line">qrtz_calendars | 以Blob类型存储Quartz的Calendar日历信息， quartz可配置一个日历来指定一个时间范围</div><div class="line">qrtz_cron_triggers | 存储Cron Trigger，包括Cron表达式和时区信息。</div><div class="line">qrtz_fired_triggers | 存储与已触发的Trigger相关的状态信息，以及相联Job的执行信息</div><div class="line">qrtz_job_details | 存储每一个已配置的Job的详细信息</div><div class="line">qrtz_locks | 存储程序的非观锁的信息(假如使用了悲观锁)</div><div class="line">qrtz_paused_trigger_graps | 存储已暂停的Trigger组的信息</div><div class="line">qrtz_scheduler_state | 存储少量的有关 Scheduler的状态信息，和别的 Scheduler 实例(假如是用于一个集群中)</div><div class="line">qrtz_simple_triggers | 存储简单的 Trigger，包括重复次数，间隔，以及已触的次数</div><div class="line">qrtz_triggers | 存储已配置的 Trigger的信息</div><div class="line">qrzt_simprop_triggers</div></pre></td></tr></table></figure></p><h2 id="利用-SpringBoot-Quartz-搭建的界面化的-Demo"><a href="#利用-SpringBoot-Quartz-搭建的界面化的-Demo" class="headerlink" title="利用 SpringBoot + Quartz 搭建的界面化的 Demo"></a>利用 SpringBoot + Quartz 搭建的界面化的 Demo</h2><p>在网上找到一个搭好的 Demo，感谢大神！原文： <a href="https://blog.csdn.net/u012907049/article/details/73801122/" target="_blank" rel="external">Spring Boot集成持久化Quartz定时任务管理和界面展示</a></p><h4 id="本工程所用到的技术或工具"><a href="#本工程所用到的技术或工具" class="headerlink" title="本工程所用到的技术或工具"></a>本工程所用到的技术或工具</h4><blockquote><p> Spring Boot<br>Mybatis<br>Quartz<br>PageHelper<br>VueJS<br>ElementUI<br>MySql数据库</p></blockquote><h4 id="先看图："><a href="#先看图：" class="headerlink" title="先看图："></a>先看图：</h4><p><img src="http://oeckzejn4.bkt.clouddn.com/20180624152983342415181.png" alt="效果图.png"><br><img src="http://oeckzejn4.bkt.clouddn.com/20180624152983345244946.png" alt="新建任务.png"></p><h4 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h4><ul><li><a href="https://github.com/chuanqiang/QuartzDemo" target="_blank" rel="external">我的github</a></li><li><a href="https://gitee.com/zhang_cq/QuartzDemo" target="_blank" rel="external">我的码云</a></li><li><a href="https://github.com/tjfy1992/SpringBootQuartz" target="_blank" rel="external">原项目github</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/bab8e4e32952#fn3" target="_blank" rel="external">quartz原理揭秘和源码解读</a></li><li><a href="https://blog.csdn.net/guolong1983811/article/details/51501346" target="_blank" rel="external">quartz由浅入深</a></li><li><a href="https://www.w3cschool.cn/quartz_doc/" target="_blank" rel="external">Quartz官方文档</a></li><li><a href="https://blog.csdn.net/u012907049/article/details/73801122/" target="_blank" rel="external">Spring Boot集成持久化Quartz定时任务管理和界面展示</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、关于-Quartz&quot;&gt;&lt;a href=&quot;#一、关于-Quartz&quot; class=&quot;headerlink&quot; title=&quot;一、关于 Quartz&quot;&gt;&lt;/a&gt;一、关于 Quartz&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://oeckzejn4.bkt.clouddn.com/20180623152976524823664.png&quot; alt=&quot;Quartz logo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chuanqiang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://chuanqiang.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="定时任务" scheme="http://chuanqiang.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="quartz" scheme="http://chuanqiang.github.io/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>Solr 入门</title>
    <link href="http://chuanqiang.github.io/2018/06/18/Solr%20%E5%85%A5%E9%97%A8/"/>
    <id>http://chuanqiang.github.io/2018/06/18/Solr 入门/</id>
    <published>2018-06-18T05:10:21.000Z</published>
    <updated>2018-06-24T15:01:53.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="企业站内搜索技术选型"><a href="#企业站内搜索技术选型" class="headerlink" title="企业站内搜索技术选型"></a>企业站内搜索技术选型</h3><p>在一些大型门户网站、电子商务网站等都需要站内搜索功能，使用传统的数据库查询方式实现搜索无法满足一些高级的搜索需求，比如：搜索速度要快、搜索结果按相关度排序、搜索内容格式不固定等，这里就需要使用全文检索技术实现搜索功能。</p><a id="more"></a><h4 id="1-单独使用Lucene实现"><a href="#1-单独使用Lucene实现" class="headerlink" title="1. 单独使用Lucene实现"></a>1. 单独使用Lucene实现</h4><p>单独使用Lucene实现站内搜索需要<strong>开发的工作量较大</strong>，主要表现在：索引维护、索引性能优化、搜索性能优化等，因此<strong>不建议采用</strong>。</p><h4 id="2-使用Google或Baidu接口"><a href="#2-使用Google或Baidu接口" class="headerlink" title="2. 使用Google或Baidu接口"></a>2. 使用Google或Baidu接口</h4><p>通过第三方搜索引擎提供的接口实现站内搜索，这样和第三方引擎系统依赖紧密，<strong>不方便扩展，不建议采用</strong>。</p><h4 id="3-使用Solr实现"><a href="#3-使用Solr实现" class="headerlink" title="3. 使用Solr实现"></a>3. 使用Solr实现</h4><p>基于Solr实现站内搜索扩展性较好并且可以减少程序员的工作量，因为Solr提供了较为完备的搜索引擎解决方案，因此在门户、论坛等系统中常用此方案。</p><h3 id="什么是Solr"><a href="#什么是Solr" class="headerlink" title="什么是Solr"></a>什么是Solr</h3><p>Solr 是Apache下的一个顶级开源项目，采用Java开发，它是基于<code>Lucene</code>的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p><p>Solr可以独立运行，运行在 Jetty、Tomcat 等这些 Servlet 容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回 Xml、json 等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><p><strong>solr是基于lucene开发企业级搜索服务器，实际上就是封装了lucene。</strong></p><p>Solr 是一个独立的企业级搜索应用服务器，它对外提供类似于 Web-service的API 接口。用户可以通过 http 请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果</p><p>Solr类似 webservice，调用接口，实现增加，修改，删除，查询索引库。</p><h5 id="solr特性"><a href="#solr特性" class="headerlink" title="solr特性"></a>solr特性</h5><ul><li>高级的全文搜索功能</li><li>专为高通量的网络流量进行的优化</li><li>基于开放接口（xml和http）的标准</li><li>综合的html管理界面</li><li>可伸缩性－能够有效地复制到另外一个Solr搜索服务器</li><li>使用xml配置达到灵活性和适配性</li><li>可扩展的插件体系</li></ul><h3 id="Solr与Lucene的区别"><a href="#Solr与Lucene的区别" class="headerlink" title="Solr与Lucene的区别"></a>Solr与Lucene的区别</h3><p><strong>Lucene是一个开放源代码的全文检索引擎工具包，它不是一个完整的全文检索引擎</strong>，Lucene提供了完整的查询引擎和索引引擎，目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者以Lucene为基础构建全文检索引擎。</p><p><strong>Solr的目标是打造一款企业级的搜索引擎系统，它是一个搜索引擎服务，可以独立运行</strong>，通过Solr可以非常快速的构建企业的搜索引擎，通过Solr也可以高效的完成站内搜索功能。</p><p>Solr 类似 webservice，提供接口，调用接口，发送一些特点语句，实现增加，删除，修改，查询。</p><h2 id="二、solr-安装（mac）"><a href="#二、solr-安装（mac）" class="headerlink" title="二、solr 安装（mac）"></a>二、solr 安装（mac）</h2><ul><li><a href="http://lucene.apache.org/solr/" target="_blank" rel="external">官网</a></li></ul><ol><li>首先安装 jdk 和 jre</li><li>安装solr：<code>brew install solr</code>安装solr，可以通过<code>brew edit solr</code>修改要安装的版本</li><li>启动 solr：<code>solr start</code>。<ul><li>默认端口号<code>8083</code>，如果该端口被占用，则会自动切换可用的端口。<br><img src="http://upload-images.jianshu.io/upload_images/763193-6b12572c69b72862.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="solr start"></li><li>启动成功后再浏览器输入URL<a href="http://127.0.0.1:8983" target="_blank" rel="external">http://127.0.0.1:8983</a>，访问 solr 后台管理界面<br><img src="http://upload-images.jianshu.io/upload_images/763193-ef8ccf420e832507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="浏览器效果"></li></ul></li><li>创建 core(可以理解为mysql中的数据库，即一个服务可以有多个库)：<code>solr create -c test_core</code><br>  <img src="http://upload-images.jianshu.io/upload_images/763193-76d7e403aa6b55f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建成功的 core"></li><li>测试分词<br> <img src="http://upload-images.jianshu.io/upload_images/763193-6a5a43ca8452ec60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试分词"></li></ol><p>由于solr自带的分词器无法将中文根据语义分词，需要引入中文分词器 IKAnalyzer</p><h2 id="三、IKAnalyzer-安装"><a href="#三、IKAnalyzer-安装" class="headerlink" title="三、IKAnalyzer 安装"></a>三、IKAnalyzer 安装</h2><p>下载地址：<a href="https://github.com/jxlwqq/Installing-Solr-and-indexing-MySQL-on-macOS/tree/master/file" target="_blank" rel="external">https://github.com/jxlwqq/Installing-Solr-and-indexing-MySQL-on-macOS/tree/master/file</a></p><h3 id="1-下载必要的组件"><a href="#1-下载必要的组件" class="headerlink" title="1. 下载必要的组件"></a>1. 下载必要的组件</h3><ul><li>IKAnalyzer jar 包: ik-analyzer-solr5-5.x.jar</li><li>IKAnalyzer 配置文件: IKAnalyzer.cfg.xml</li><li>词库: mydict.dic 和 stopword.dic</li></ul><p>下载后，将相关文件复制到相应的目录中，操作目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cp ik-analyzer-solr5-5.x.jar /usr/local/Cellar/solr/7.3.1/server/solr-webapp/webapp/WEB-INF/lib/ </div><div class="line">mkdir /usr/local/Cellar/solr/7.3.1/server/solr-webapp/webapp/WEB-INF/lib/classes/</div><div class="line"></div><div class="line">cp IKAnalyzer.cfg.xml /usr/local/Cellar/solr/7.3.1/server/solr-webapp/webapp/WEB-INF/lib/classes/</div><div class="line">cp mydict.dic /usr/local/Cellar/solr/7.3.1/server/solr-webapp/webapp/WEB-INF/lib/classes/</div><div class="line">cp stopword.dic /usr/local/Cellar/solr/7.3.1/server/solr-webapp/webapp/WEB-INF/lib/classes/</div></pre></td></tr></table></figure></p><h3 id="2-修改-managed-schema-文件"><a href="#2-修改-managed-schema-文件" class="headerlink" title="2. 修改 managed-schema 文件"></a>2. 修改 managed-schema 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// test_core 仓库下</div><div class="line">vi /usr/local/Cellar/solr/7.3.1/server/solr/test_core/conf/managed-schema</div></pre></td></tr></table></figure><p>在<code>schema</code>标签内追加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;</div><div class="line">    &lt;analyzer class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;</div><div class="line">&lt;/fieldType&gt;</div><div class="line">&lt;field name=&quot;text_ik&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot;/&gt;</div></pre></td></tr></table></figure></p><h3 id="3-重启测试"><a href="#3-重启测试" class="headerlink" title="3. 重启测试"></a>3. 重启测试</h3><p>进行重启：<code>solr restart</code><br>进行测试：刷新页面，进入到 test_core 仓库下<br><img src="http://upload-images.jianshu.io/upload_images/763193-206cdceddb2ffc41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试页面2"></p><p>测试成功！</p><h2 id="四、solr-常用命令"><a href="#四、solr-常用命令" class="headerlink" title="四、solr 常用命令"></a>四、solr 常用命令</h2><ol><li>其他命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">查看版本：solr -version</div><div class="line">重启：solr restart</div><div class="line">关闭：solr stop -all（或者指定端口号：solr stop -p 8983）</div><div class="line">创建集合：solr create -c [集合名称]</div><div class="line">删除集合：solr delete -c [集合名称]</div></pre></td></tr></table></figure></li></ol><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;delete&gt;</div><div class="line">    &lt;query&gt;*:*&lt;/query&gt;</div><div class="line">&lt;/delete&gt;</div><div class="line">&lt;commit/&gt;</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/763193-c7341df0943093cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="solr 删除数据"></p><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;delete-field&quot; : &#123;</div><div class="line">        &quot;name&quot; : &quot;字段名称&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;delete-field&quot; : &#123;</div><div class="line">        &quot;name&quot; : &quot;字段名称&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>提交的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">POST    http://localhost:8983/solr/集合名称/schema</div></pre></td></tr></table></figure></p><h4 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h4><blockquote><p>name: 字段名称<br>type: 字段类型<br>stored: 是否保存<br>indexed: 是否索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;add-field&quot; : &#123;</div><div class="line">        &quot;name&quot; : &quot;字段名称&quot;,</div><div class="line">        &quot;type&quot; : &quot;text_ik&quot;,</div><div class="line">        &quot;stored&quot; : &quot;true&quot;,</div><div class="line">        &quot;indexed&quot; : &quot;true&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;add-field&quot; : &#123;</div><div class="line">        &quot;name&quot; : &quot;字段名称&quot;,</div><div class="line">        &quot;type&quot; : &quot;text_ik&quot;,</div><div class="line">        &quot;stored&quot; : &quot;true&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>提交地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">POST    http://localhost:8983/solr/集合名称/schema</div></pre></td></tr></table></figure></p><p>还可以在管理员界面添加<br><img src="http://upload-images.jianshu.io/upload_images/763193-09d787dad75b7b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="solr 管理页面添加字段"></p><h2 id="五、solrJ"><a href="#五、solrJ" class="headerlink" title="五、solrJ"></a>五、solrJ</h2><p>SolrJ 是操作 Solr官方提供的Java客户端，它底层使用<code>HttpClient</code>封装了大量的方法，使用它可以非常方便的对Solr索引进行增加、删除、修改、查询操作。</p><h4 id="1-增加maven依赖"><a href="#1-增加maven依赖" class="headerlink" title="1. 增加maven依赖"></a>1. 增加maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.solr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>solr-solrj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="2-创建-Model"><a href="#2-创建-Model" class="headerlink" title="2. 创建 Model"></a>2. 创建 Model</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</div><div class="line"><span class="meta">@Field</span>(<span class="string">"id"</span>)</div><div class="line"><span class="keyword">private</span> String id;</div><div class="line"><span class="meta">@Field</span>(<span class="string">"name"</span>)</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="meta">@Field</span>(<span class="string">"age"</span>)</div><div class="line"><span class="keyword">private</span> Integer age;</div><div class="line">        <span class="comment">// get()、set() ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-创建演示类"><a href="#3-创建演示类" class="headerlink" title="3. 创建演示类"></a>3. 创建演示类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrJExample</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> HttpSolrClient solrClient;</div><div class="line"><span class="comment">//由于目前只有一个Core，就直接写在url上拉，这里不写的话CRUD操作前都要声明被操作的Core，切记。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String solrUrl = <span class="string">"http://localhost:8983/solr/test_core"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 初始化客户端</span></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">solrClient = <span class="keyword">new</span> HttpSolrClient.Builder(solrUrl)</div><div class="line">.withConnectionTimeout(<span class="number">10000</span>)</div><div class="line">.withSocketTimeout(<span class="number">60000</span>)</div><div class="line">.build();</div><div class="line"><span class="comment">//由于目前只有一个Core，就直接写在url上拉，这里不写的话CRUD操作前都要声明被操作的Core，切记。</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 提交，关闭会话</span></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line">solrClient.commit();</div><div class="line">solrClient.close();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4-添加索引"><a href="#4-添加索引" class="headerlink" title="4. 添加索引"></a>4. 添加索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加一个用户</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line">    solrClient.addBean(<span class="keyword">new</span> Man(<span class="string">"2"</span>, <span class="string">"张三"</span>, <span class="number">48</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 添加多个用户</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addList</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> max = <span class="number">100</span>;</div><div class="line"></div><div class="line">    List&lt;Man&gt; userList = <span class="keyword">new</span> ArrayList&lt;Man&gt;(<span class="number">100</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (i &lt;= max) &#123;</div><div class="line">        userList.add(<span class="keyword">new</span> Man(String.valueOf(i), <span class="string">"土豆-"</span> + i, i));</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    solrClient.addBeans(userList);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://oeckzejn4.bkt.clouddn.com/20180624152985103015701.png" alt="效果.png"></p><h4 id="5-删除、查询及类完整代码"><a href="#5-删除、查询及类完整代码" class="headerlink" title="5. 删除、查询及类完整代码"></a>5. 删除、查询及类完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrJExample</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> HttpSolrClient solrClient;</div><div class="line"><span class="comment">//由于目前只有一个Core，就直接写在url上拉，这里不写的话CRUD操作前都要声明被操作的Core，切记。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String solrUrl = <span class="string">"http://localhost:8983/solr/test_core"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 初始化客户端</span></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">solrClient = <span class="keyword">new</span> HttpSolrClient.Builder(solrUrl)</div><div class="line">.withConnectionTimeout(<span class="number">10000</span>)</div><div class="line">.withSocketTimeout(<span class="number">60000</span>)</div><div class="line">.build();</div><div class="line"><span class="comment">//由于目前只有一个Core，就直接写在url上拉，这里不写的话CRUD操作前都要声明被操作的Core，切记。</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 提交，关闭会话</span></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line">solrClient.commit();</div><div class="line">solrClient.close();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 添加一个用户</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line">solrClient.addBean(<span class="keyword">new</span> Man(<span class="string">"2"</span>, <span class="string">"张三"</span>, <span class="number">48</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 添加多个用户</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addList</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> max = <span class="number">100</span>;</div><div class="line"></div><div class="line">List&lt;Man&gt; userList = <span class="keyword">new</span> ArrayList&lt;Man&gt;(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (i &lt;= max) &#123;</div><div class="line">userList.add(<span class="keyword">new</span> Man(String.valueOf(i), <span class="string">"土豆-"</span> + i, i));</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line">solrClient.addBeans(userList);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line">solrClient.deleteById(<span class="string">"1"</span>);<span class="comment">//删除一个</span></div><div class="line"></div><div class="line">solrClient.deleteByQuery(<span class="string">"*:*"</span>);<span class="comment">//删除所有</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</div><div class="line"><span class="comment">//构造查询参数</span></div><div class="line">SolrQuery query = <span class="keyword">new</span> SolrQuery(<span class="string">"name:土豆*"</span>);<span class="comment">//查询姓名包含土豆的User</span></div><div class="line">query.set(<span class="string">"fl"</span>, <span class="string">"id,name"</span>);<span class="comment">//返回字段值，不返回则为null</span></div><div class="line">query.setSort(<span class="string">"age"</span>, SolrQuery.ORDER.asc);<span class="comment">//按年龄升序</span></div><div class="line">query.setHighlight(<span class="keyword">true</span>);                <span class="comment">//开启高亮</span></div><div class="line">query.setHighlightFragsize(<span class="number">10</span>);          <span class="comment">//返回的字符个数</span></div><div class="line">query.setHighlightRequireFieldMatch(<span class="keyword">true</span>);</div><div class="line">query.setHighlightSimplePre(<span class="string">"&lt;font color=\"red\"&gt;"</span>);    <span class="comment">//前缀</span></div><div class="line">query.setHighlightSimplePost(<span class="string">"&lt;/font&gt;"</span>);    <span class="comment">//后缀</span></div><div class="line">query.setParam(<span class="string">"hl.fl"</span>, <span class="string">"name"</span>);      <span class="comment">//高亮字段</span></div><div class="line">query.setStart(<span class="number">0</span>);  <span class="comment">//分页参数</span></div><div class="line">query.setRows(<span class="number">10</span>); <span class="comment">//分页参数</span></div><div class="line"></div><div class="line"><span class="comment">//获得查询结果</span></div><div class="line">QueryResponse response = solrClient.query(query);</div><div class="line"></div><div class="line"><span class="comment">//转换为Java Bean</span></div><div class="line">List&lt;Man&gt; userList = response.getBeans(Man.class);</div><div class="line"></div><div class="line">Assert.assertNotNull(userList);</div><div class="line">Assert.assertTrue(userList.size() == <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>参考资料</p><ul><li><a href="http://lucene.apache.org/solr/6_2_0/solr-solrj/" target="_blank" rel="external">Solr 6.2.0 solr-solrj API</a></li><li><a href="https://www.linuxidc.com/Linux/2016-11/137006.htm" target="_blank" rel="external">macOS安装Solr并索引MySQL</a></li><li><a href="https://blog.csdn.net/yuruixin_china/article/details/80037873" target="_blank" rel="external">solr安装、使用、配置中文分词器</a></li><li><a href="https://blog.csdn.net/column/details/14165.html" target="_blank" rel="external">solr 学习与测试</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h2&gt;&lt;h3 id=&quot;企业站内搜索技术选型&quot;&gt;&lt;a href=&quot;#企业站内搜索技术选型&quot; class=&quot;headerlink&quot; title=&quot;企业站内搜索技术选型&quot;&gt;&lt;/a&gt;企业站内搜索技术选型&lt;/h3&gt;&lt;p&gt;在一些大型门户网站、电子商务网站等都需要站内搜索功能，使用传统的数据库查询方式实现搜索无法满足一些高级的搜索需求，比如：搜索速度要快、搜索结果按相关度排序、搜索内容格式不固定等，这里就需要使用全文检索技术实现搜索功能。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://chuanqiang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="solr" scheme="http://chuanqiang.github.io/tags/solr/"/>
    
      <category term="搜索" scheme="http://chuanqiang.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>干杯，朋友</title>
    <link href="http://chuanqiang.github.io/2018/06/17/%E5%B9%B2%E6%9D%AF%EF%BC%8C%E6%9C%8B%E5%8F%8B/"/>
    <id>http://chuanqiang.github.io/2018/06/17/干杯，朋友/</id>
    <published>2018-06-17T09:36:11.000Z</published>
    <updated>2018-06-18T04:30:31.131Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oeckzejn4.bkt.clouddn.com/20180617152922829457807.png" alt=""></p><a id="more"></a><p>离职代表着离别，<br>诗人说，每一次告别是一次死亡。<br>看你消失在暮霭里，<br>连同一段春天的记忆。</p><p>短暂的午餐，<br>融洽的交谈，<br>吃的很少，犹如你的话语和矜持。<br>丝毫不像个东北汉子，<br>细致、单纯而又孩子气。</p><p>你走后，<br>宛如一阵风拂过，<br>亦如一种味道的消散。<br>交点过后飞驰而过的直线，<br>有过焦点，<br>却又相去甚远。</p><p>某个发呆的午后，<br>思绪蔓延，<br>回忆里，<br>阳光映照我们的脸。</p><p>干杯，朋友！<br>喝下这杯酒，<br>味道消散，<br>时光永远。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oeckzejn4.bkt.clouddn.com/20180617152922829457807.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="为你写诗" scheme="http://chuanqiang.github.io/categories/%E4%B8%BA%E4%BD%A0%E5%86%99%E8%AF%97/"/>
    
    
      <category term="诗" scheme="http://chuanqiang.github.io/tags/%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>iPad 初体验</title>
    <link href="http://chuanqiang.github.io/2018/06/04/iPad%20%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://chuanqiang.github.io/2018/06/04/iPad 初体验/</id>
    <published>2018-06-04T05:40:52.000Z</published>
    <updated>2018-06-04T05:41:35.398Z</updated>
    
    <content type="html"><![CDATA[<p>趁着 618 的有活动，终于入手了 2018 new iPad ，至此我的 Apple 生态圈又壮大了一步：现在手中有 mac book pro、iPhone7、new iPad 2018 以及 Beats  Solo 3。不得不说苹果生态圈的强大，一旦你有超过两台的  apple 产品，你就会体会到苹果自家产品间的交互和共生互利的优质体验。不管在 App上，在云服务，数据的传输和共享方面都存在效率和体验上的升华。</p><p><img src="http://oeckzejn4.bkt.clouddn.com/20180604152809073239290.jpg" alt="iPad.jpg"></p><a id="more"></a><p>比如，我的新 iPad 刚到手一开机，我的iPhone 就有一个弹框，通过指纹确认的方式来把新 iPad 加入到你的 icloud，然后你的手机数据就会自动同步过去，不管是照片、软件、文件，哪怕是 WIFI 都会自动保存密码并连接。如此的便利性，让你上手 iPad 变得低成本化。同样的 ios 系统，我用起 ipad 来得心应手，当然有一些手势交互因为大屏幕的关系会有适配从而和 iPhone 不同。</p><p>iPad 用起来，就一个字：爽。那种大屏幕大视野带来的视觉冲击感，主要集中体现在阅读、视频和游戏。Retina 显示屏，一整块的玻璃宛如一汪清水，晶莹剔透，水下是一个精彩纷呈的互联网世界，鞠一捧清水，尝一口甘冽，就像刚换了座驾的机车爱好者，尽情享受耳旁呼啸而过的风和动人的风景。</p><p><img src="http://oeckzejn4.bkt.clouddn.com/20180604152809081247753.jpg" alt="iPad.jpg"></p><p>这款 iPad 是 9.7.英寸的 Retina 屏幕，配置是32G WLAN版/A10 芯片/银色，和以往的 iPad 相差无几，做工一流，一股浓浓的苹果风格。当然关于硬件上的缺点也是有的：</p><ol><li>没有 3D touch，这是一个用顺手就再也回不去的功能。</li><li>边框宽，尤其是额头和下巴，这几年被全面屏调教的审美已经看不惯这种大额头下巴的设计（此处心疼魅族一分钟）。</li></ol><p>当然，对于两千多的售价，也不能对它太苛刻，这样的性价比已经感觉很值了。</p><p>关于 iPad 的生产力之说，网上也是沸沸扬扬，莫衷一是。其实我觉得虽然这是一个『萝卜白菜各有所爱』的话题，但也并不是没有讨论的必要，通过这种探讨可以拓宽我们对 iPad 的使用场景的认知，以及对自己所需的生产力和生产工具的辩证思考。</p><p>现代人常常陷入到一种工具迷思中。所谓工具迷思，就是希望通过某个特定工具完成一系列任务的念想，然而在越来越复杂的现代社会里，即便是某个特定领域，一方面由于应用或工具自身的局限性，另一方面则是事件的复杂性，很难出现这样一个能够完成所有流程的工具。</p><p>所以不要陷入工具的迷思，任何工具的使用都应该从自身的需求出发，从而让工具服务于生活，再而延伸我们的生活场景。</p><p>相信通过一段时间的探索，我能找到这款设备在生活中最佳的适应点，然后让它最大化的发光发热，并且在上边发现和探索一些有趣有用有料的 APP ，让科技产品更好的为生活造就幸福感。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着 618 的有活动，终于入手了 2018 new iPad ，至此我的 Apple 生态圈又壮大了一步：现在手中有 mac book pro、iPhone7、new iPad 2018 以及 Beats  Solo 3。不得不说苹果生态圈的强大，一旦你有超过两台的  apple 产品，你就会体会到苹果自家产品间的交互和共生互利的优质体验。不管在 App上，在云服务，数据的传输和共享方面都存在效率和体验上的升华。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oeckzejn4.bkt.clouddn.com/20180604152809073239290.jpg&quot; alt=&quot;iPad.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="独白" scheme="http://chuanqiang.github.io/categories/%E7%8B%AC%E7%99%BD/"/>
    
    
      <category term="产品" scheme="http://chuanqiang.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="iPad" scheme="http://chuanqiang.github.io/tags/iPad/"/>
    
      <category term="apple" scheme="http://chuanqiang.github.io/tags/apple/"/>
    
  </entry>
  
  <entry>
    <title>大千世界 - 歌评</title>
    <link href="http://chuanqiang.github.io/2018/06/01/%E5%A4%A7%E5%8D%83%E4%B8%96%E7%95%8C%20-%20%E6%AD%8C%E8%AF%84/"/>
    <id>http://chuanqiang.github.io/2018/06/01/大千世界 - 歌评/</id>
    <published>2018-06-01T03:40:37.000Z</published>
    <updated>2018-06-04T05:39:20.405Z</updated>
    
    <content type="html"><![CDATA[<p>今天是 2018年6月1号，国际儿童节，当我们沉浸在儿童节的氛围中时（虽然我们都已不再是儿童，但并不妨碍我们过节日），许嵩已经在另一座山头像我们招手了。他选择在这一天发布一首新歌，叫做《大千世界》。开始没听懂，听了几遍才明白这不是一首普通的歌，而是这是一首献给叙利亚儿童的儿童节反战礼物。<br><img src="http://oeckzejn4.bkt.clouddn.com/20180601152782485610264.jpg" alt="大千世界 专辑封面.jpg"><br><a id="more"></a></p><p>歌词如下：</p><blockquote><p>大到有些滑稽，<br>像沙漠连夜大雨，<br>规则缺席，<br>亦真亦假的玩具，<br>还握在你手里，<br>吃透温柔的暴力就不称奇，<br>我的黑框眼镜在Assad湖边走火，<br>风马牛齐聚，<br>你被带走时我亲吻了你下颌的伤疤，<br>表情很平静，<br>你是大千世界一汪清泉，<br>还是泉边那只神秘孔雀，<br>在和你灵魂谋面之前，<br>让贪念趁火打劫，<br>你是大千世界尘埃等闲，<br>也是我仅有的风花雪月，<br>爱死或是恨终我都感谢，<br>万花筒里消受幻影碎片，<br>你穿着我的T恤，<br>大到有些滑稽，<br>像沙漠连夜大雨，<br>规则缺席，<br>亦真亦假的玩具，<br>还握在你手里，<br>吃透温柔的暴力就不称奇，<br>我的黑框眼镜在Assad湖边走火，<br>风马牛齐聚，<br>你被带走时我亲吻了你下颌的伤疤，<br>表情很平静，<br>你是大千世界一汪清泉，<br>还是泉边那只神秘孔雀，<br>在和你灵魂谋面之前，<br>让贪念趁火打劫，<br>你是大千世界尘埃等闲，<br>也是我仅有的风花雪月，<br>爱死或是恨终我都感谢，<br>万花筒里消受，<br>你是大千世界一汪清泉，<br>还是泉边那只神秘孔雀，<br>在和你灵魂谋面之前，<br>让贪念趁火打劫，<br>你是大千世界过眼云烟，<br>也是我仅有的夺目闪电，<br>躁动或是寡言我都奉献，<br>万花筒里留下真切纪念。</p></blockquote><p>歌词信息量大，像是一篇深刻的现代诗。歌词内容有许多映射和隐喻的东西，让人想起村上春树的小说。比如歌长4分15秒，映射17年4月15日致68名儿童死亡的叙利亚炸弹袭袭击事件。还有写『孔雀』的歌词，那是2月26日，在瑞士日内瓦联合国万国宫，一只孔雀落在正举行叙利亚和谈的建筑门上，之后25日发生在叙利亚中部城市霍姆斯的恐怖袭击案搅动了正在进行的日内瓦和谈。再有歌中颤音的失真处理是表达战火连天里那个失真世界的荒诞感。</p><p>大千世界寓意东方的禅意——但又以西方的音乐形态作为曲风基地，令人耳目一新。整首歌都以一种荒诞黑色的曲调来叙述一些荒诞和蒙太奇风格的场景，但是你能感受到一种讽刺、控诉和对现实的悲情以及无力感。</p><p>作品围绕一场救赎展开叙事，逐步推演至对『幻想与现实』、『大千世界与小我』展开思辨，在精心拣选的意向中传达多层次含义，这是许嵩标志性的一词多义的语言系统。他的作品总有鲜明的个人腔调和深刻的内核，他的作品已经不完全是一首歌本身，而是借助音乐的载体表达更多东西，那是每一个艺术家都在追求的。</p><p>总之，为歌点赞，同时也为战争中的儿童祈愿。</p><ul><li>参考资料：网易云音乐iPad 初体验</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是 2018年6月1号，国际儿童节，当我们沉浸在儿童节的氛围中时（虽然我们都已不再是儿童，但并不妨碍我们过节日），许嵩已经在另一座山头像我们招手了。他选择在这一天发布一首新歌，叫做《大千世界》。开始没听懂，听了几遍才明白这不是一首普通的歌，而是这是一首献给叙利亚儿童的儿童节反战礼物。&lt;br&gt;&lt;img src=&quot;http://oeckzejn4.bkt.clouddn.com/20180601152782485610264.jpg&quot; alt=&quot;大千世界 专辑封面.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="乐评" scheme="http://chuanqiang.github.io/categories/%E4%B9%90%E8%AF%84/"/>
    
    
      <category term="许嵩" scheme="http://chuanqiang.github.io/tags/%E8%AE%B8%E5%B5%A9/"/>
    
      <category term="乐评" scheme="http://chuanqiang.github.io/tags/%E4%B9%90%E8%AF%84/"/>
    
  </entry>
  
</feed>
